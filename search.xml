<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Harbor部署</title>
    <url>/2022/05/25/Harbor%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<p>Harbor 概述</p>
<p>Harbor是由VMWare公司开源的容器镜像仓库。事实上，Harbor是在Docker Registry上进行了相应的企业级扩展， 从而获得了更加广泛的应用，这些新的企业级特性包括：管理用户界面，基于角色的访问控制 ，AD/LDAP集成以及 审计日志等，足以满足基本企业需求。</p>
<p>官方：<a href="https://goharbor.io/">https://goharbor.io/</a></p>
<p>Github：<a href="https://github.com/goharbor/harbor">https://github.com/goharbor/harbor</a></p>
<p>Harbor 部署先决条件</p>
<p>服务器硬件配置：</p>
<p>最低要求：CPU2核/内存4G/硬盘40GB</p>
<p>推荐：CPU4核/内存8G/硬盘160GB</p>
<p>软件：</p>
<p>Docker CE 17.06版本+</p>
<p>Docker Compose 1.18版本+</p>
<p>Harbor安装有2种方式：</p>
<p>在线安装：从Docker Hub下载Harbor相关镜像，因此安装软件包非常小</p>
<p>离线安装：安装包包含部署的相关镜像，因此安装包比较大</p>
<p>Harbor 部署HTTP</p>
<p>1、先安装Docker和Docker Compose</p>
<p><a href="https://github.com/docker/compose/releases">https://github.com/docker/compose/releases</a></p>
<p>2、部署Harbor HTTP</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">mv docker-compose-<span class="title class_">Linux</span>-x86_64 /usr/bin/docker-compose</span><br><span class="line">chmod +x /usr/bin/docker-compose</span><br><span class="line"></span><br><span class="line">tar zxvf harbor-offline-installer-v2<span class="number">.0</span><span class="number">.0</span>.<span class="property">tgz</span> </span><br><span class="line">cd harbor </span><br><span class="line">cp harbor.<span class="property">yml</span>.<span class="property">tmpl</span> harbor.<span class="property">yml</span> </span><br><span class="line"></span><br><span class="line">vi harbor.<span class="property">yml</span> </span><br><span class="line"><span class="attr">hostname</span>: reg.<span class="property">azhe</span>.<span class="property">com</span> </span><br><span class="line">#<span class="attr">https</span>: # 先注释https相关配置 </span><br><span class="line"><span class="attr">harbor_admin_password</span>: <span class="title class_">Harbor12345</span> </span><br><span class="line">./prepare</span><br><span class="line">./install.<span class="property">sh</span></span><br></pre></td></tr></table></figure>
<p>3、访问harbor</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">http</span>:<span class="comment">//reg.azhe.com/</span></span><br></pre></td></tr></table></figure>
<p><img src="/2022/05/25/Harbor%E9%83%A8%E7%BD%B2/65FF30622A314D5391BD5ACBBEC52776clipboard.png" alt></p>
<p>Harbor 基本使用</p>
<p>1、配置http镜像仓库可信任（默认是https访问的，上面配置的是http，这里需要配置可信任)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">#配置http镜像仓库可信任</span><br><span class="line">vi /etc/docker/daemon.<span class="property">json</span> </span><br><span class="line">&#123;<span class="string">&quot;insecure-registries&quot;</span>:[<span class="string">&quot;reg.azhe.com&quot;</span>]&#125; </span><br><span class="line">systemctl restart docker</span><br><span class="line">#查看是否有harbor容器退出，重新停止再拉起</span><br><span class="line">docker-compose ps</span><br><span class="line">docker-compose down</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>
<p>2.配置本地hosts文件解析</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">vim /etc/hosts</span><br><span class="line"><span class="number">192.168</span><span class="number">.0</span><span class="number">.11</span> reg.<span class="property">azhe</span>.<span class="property">com</span></span><br></pre></td></tr></table></figure>
<p>3.登录harbbor,打标签，上传，下载</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">docker login reg.<span class="property">azhe</span>.<span class="property">com</span></span><br><span class="line"><span class="title class_">Username</span>: admin</span><br><span class="line"><span class="title class_">Password</span>: <span class="title class_">Harbor12345</span></span><br><span class="line"></span><br><span class="line">docker images</span><br><span class="line">docker tag <span class="attr">mysql</span>:<span class="number">5.7</span> reg.<span class="property">azhe</span>.<span class="property">com</span>/library/<span class="attr">mysql</span>:<span class="number">5.7</span></span><br><span class="line">docker push reg.<span class="property">azhe</span>.<span class="property">com</span>/library/<span class="attr">mysql</span>:<span class="number">5.7</span></span><br><span class="line">docker pull reg.<span class="property">azhe</span>.<span class="property">com</span>/library/<span class="attr">mysql</span>:<span class="number">5.7</span></span><br></pre></td></tr></table></figure>
<p><img src="/2022/05/25/Harbor%E9%83%A8%E7%BD%B2/158D447BE1A84A4C96A9CC38A8FF762Dclipboard.png" alt></p>
<p>Harbor 部署HTTPS</p>
<p>1、生成SSL证书</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">mkdir ssl</span><br><span class="line">cd ssl</span><br><span class="line">ls</span><br><span class="line">ca-config.<span class="property">json</span>  ca-key.<span class="property">pem</span>  cfssl.<span class="property">sh</span>               reg.<span class="property">azhe</span>.<span class="property">com</span>-key.<span class="property">pem</span></span><br><span class="line">ca.<span class="property">csr</span>          ca.<span class="property">pem</span>      reg.<span class="property">azhe</span>.<span class="property">com</span>.<span class="property">csr</span>       reg.<span class="property">azhe</span>.<span class="property">com</span>.<span class="property">pem</span></span><br><span class="line">ca-csr.<span class="property">json</span>     certs.<span class="property">sh</span>    reg.<span class="property">azhe</span>.<span class="property">com</span>-csr.<span class="property">json</span></span><br></pre></td></tr></table></figure>
<p>vim <a href="http://cfssl.sh">cfssl.sh</a> (证书生成工具）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">wget <span class="attr">https</span>:<span class="comment">//pkg.cfssl.org/R1.2/cfssl_linux-amd64</span></span><br><span class="line">wget <span class="attr">https</span>:<span class="comment">//pkg.cfssl.org/R1.2/cfssljson_linux-amd64</span></span><br><span class="line">wget <span class="attr">https</span>:<span class="comment">//pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64</span></span><br><span class="line">chmod +x cfssl*</span><br><span class="line">mv cfssl_linux-amd64 /usr/bin/cfssl</span><br><span class="line">mv cfssljson_linux-amd64 /usr/bin/cfssljson</span><br><span class="line">mv cfssl-certinfo_linux-amd64 /usr/bin/cfssl-certinfo</span><br></pre></td></tr></table></figure>
<p>vim <a href="http://certs.sh">certs.sh</a>(证书生成脚本）</p>
<p>#注意里面的域名修改为自己的harbor域名</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cat &gt; ca-config.<span class="property">json</span> &lt;&lt;<span class="variable constant_">EOF</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;signing&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;default&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;expiry&quot;</span>: <span class="string">&quot;87600h&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;profiles&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;kubernetes&quot;</span>: &#123;</span><br><span class="line">         <span class="string">&quot;expiry&quot;</span>: <span class="string">&quot;87600h&quot;</span>,</span><br><span class="line">         <span class="string">&quot;usages&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;signing&quot;</span>,</span><br><span class="line">            <span class="string">&quot;key encipherment&quot;</span>,</span><br><span class="line">            <span class="string">&quot;server auth&quot;</span>,</span><br><span class="line">            <span class="string">&quot;client auth&quot;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable constant_">EOF</span></span><br><span class="line"></span><br><span class="line">cat &gt; ca-csr.<span class="property">json</span> &lt;&lt;<span class="variable constant_">EOF</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;CN&quot;</span>: <span class="string">&quot;kubernetes&quot;</span>,</span><br><span class="line">    <span class="string">&quot;key&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;algo&quot;</span>: <span class="string">&quot;rsa&quot;</span>,</span><br><span class="line">        <span class="string">&quot;size&quot;</span>: <span class="number">2048</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;names&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;C&quot;</span>: <span class="string">&quot;CN&quot;</span>,</span><br><span class="line">            <span class="string">&quot;L&quot;</span>: <span class="string">&quot;Beijing&quot;</span>,</span><br><span class="line">            <span class="string">&quot;ST&quot;</span>: <span class="string">&quot;Beijing&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable constant_">EOF</span></span><br><span class="line"></span><br><span class="line">cfssl gencert -initca ca-csr.<span class="property">json</span> | cfssljson -bare ca -</span><br><span class="line"></span><br><span class="line">cat &gt; reg.<span class="property">azhe</span>.<span class="property">com</span>-csr.<span class="property">json</span> &lt;&lt;<span class="variable constant_">EOF</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;CN&quot;</span>: <span class="string">&quot;reg.azhe.com&quot;</span>,</span><br><span class="line">  <span class="string">&quot;hosts&quot;</span>: [],</span><br><span class="line">  <span class="string">&quot;key&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;algo&quot;</span>: <span class="string">&quot;rsa&quot;</span>,</span><br><span class="line">    <span class="string">&quot;size&quot;</span>: <span class="number">2048</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;names&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;C&quot;</span>: <span class="string">&quot;CN&quot;</span>,</span><br><span class="line">      <span class="string">&quot;L&quot;</span>: <span class="string">&quot;BeiJing&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ST&quot;</span>: <span class="string">&quot;BeiJing&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable constant_">EOF</span></span><br><span class="line"></span><br><span class="line">cfssl gencert -ca=ca.<span class="property">pem</span> -ca-key=ca-key.<span class="property">pem</span> -config=ca-config.<span class="property">json</span> -profile=kubernetes reg.<span class="property">azhe</span>.<span class="property">com</span>-csr.<span class="property">json</span> | cfssljson -bare reg.<span class="property">azhe</span>.<span class="property">com</span> </span><br></pre></td></tr></table></figure>
<p>2、Harbor启用HTTPS</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">vi harbor.<span class="property">yml</span></span><br><span class="line"><span class="attr">https</span>:</span><br><span class="line">  <span class="attr">port</span>: <span class="number">443</span></span><br><span class="line">   <span class="attr">certificate</span>: <span class="regexp">/root/</span>ssl/reg.<span class="property">azhe</span>.<span class="property">com</span>.<span class="property">pem</span>     #指定你生成的数字证书</span><br><span class="line">   <span class="attr">private_key</span>: <span class="regexp">/root/</span>ssl/reg.<span class="property">azhe</span>.<span class="property">com</span>-key.<span class="property">pem</span>   #指定key</span><br><span class="line"> </span><br></pre></td></tr></table></figure>
<p>3、重新配置并部署Harbor</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">./prepare </span><br><span class="line">docker-compose down </span><br><span class="line">docker-compose up –d</span><br></pre></td></tr></table></figure>
<p>4、修改Docker启动文件添加“–insecure-registry <a href="http://reg.azhe.com">reg.azhe.com</a>”并配置hosts文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">vim /usr/lib/systemd/system/docker.<span class="property">service</span> </span><br><span class="line"><span class="title class_">ExecStart</span>=<span class="regexp">/usr/</span>bin/dockerd -H <span class="attr">fd</span>:<span class="comment">// --containerd=/run/containerd/containerd.sock --insecure-registry reg.azhe.com</span></span><br><span class="line"></span><br><span class="line">systemctl restart docker</span><br><span class="line">vim /etc/hosts</span><br><span class="line"><span class="number">192.168</span><span class="number">.0</span><span class="number">.11</span> reg.<span class="property">azhe</span>.<span class="property">com</span></span><br></pre></td></tr></table></figure>
<p>5、验证</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">docker login reg.<span class="property">azhe</span>.<span class="property">com</span></span><br><span class="line"><span class="title class_">Username</span>: admin</span><br><span class="line"><span class="title class_">Password</span>: <span class="title class_">Harbor12345</span></span><br><span class="line"></span><br><span class="line">docker images</span><br><span class="line">docker pull reg.<span class="property">azhe</span>.<span class="property">com</span>/library/<span class="attr">mysql</span>:<span class="number">5.7</span></span><br></pre></td></tr></table></figure>
<p>以上harbor部署https方式的第4步骤，如果配置完成后，在docker主机登录harbor报证书错误，那么可以通过以下方式解决或参考链接：</p>
<p>4.将数字证书复制到Docker主机</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">scp reg.<span class="property">azhe</span>.<span class="property">com</span>.<span class="property">pem</span> root@<span class="number">192.168</span><span class="number">.0</span><span class="number">.13</span>:~   #拷贝到要登录harbor的docker客户端</span><br><span class="line">mkdir /etc/docker/certs.<span class="property">d</span>/reg.<span class="property">azhe</span>.<span class="property">com</span></span><br><span class="line">cp reg.<span class="property">azhe</span>.<span class="property">com</span>.<span class="property">pem</span> /etc/docker/certs.<span class="property">d</span>/reg.<span class="property">azhe</span>.<span class="property">com</span>/reg.<span class="property">azhe</span>.<span class="property">com</span>.<span class="property">crt</span></span><br></pre></td></tr></table></figure>
<p>参考链接</p>
<p><a href="https://blog.csdn.net/chenglang0914/article/details/100833054">https://blog.csdn.net/chenglang0914/article/details/100833054</a></p>
<p>Harbor 主从复制</p>
<p><img src="/2022/05/25/Harbor%E9%83%A8%E7%BD%B2/B77A284AA7994A2894263F4F287452E8clipboard.png" alt></p>
<p>主备模式</p>
<p>1.准备备机harbor</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">mv docker-compose-<span class="title class_">Linux</span>-x86_64 /usr/bin/docker-compose</span><br><span class="line">chmod +x /usr/bin/docker-compose</span><br><span class="line"></span><br><span class="line">tar -zxf harbor-offline-installer-v2<span class="number">.0</span><span class="number">.0</span>.<span class="property">tgz</span></span><br><span class="line">cd harbor </span><br><span class="line">cp harbor.<span class="property">yml</span>.<span class="property">tmpl</span> harbor.<span class="property">yml</span> </span><br><span class="line"></span><br><span class="line">vi harbor.<span class="property">yml</span> </span><br><span class="line"><span class="attr">hostname</span>: <span class="number">192.168</span><span class="number">.0</span><span class="number">.12</span></span><br><span class="line">#<span class="attr">https</span>: # 先注释https相关配置 </span><br><span class="line"><span class="attr">harbor_admin_password</span>: <span class="title class_">Harbor12345</span> </span><br><span class="line">./prepare</span><br><span class="line">./install.<span class="property">sh</span></span><br></pre></td></tr></table></figure>
<p>2.在主harbor页面配置主从复制和规则</p>
<p><img src="/2022/05/25/Harbor%E9%83%A8%E7%BD%B2/2A099C79ECDB4C83B3D5917E0BDA3BE6clipboard.png" alt></p>
<p><img src="/2022/05/25/Harbor%E9%83%A8%E7%BD%B2/2726A20B44774F2EABFB8A0F45DDC380clipboard.png" alt></p>
<p>3.客户端docker主机上传镜像到主harbor并验证是否复制到从harbor</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">docker login reg.<span class="property">azhe</span>.<span class="property">com</span></span><br><span class="line"><span class="title class_">Username</span>: admin</span><br><span class="line"><span class="title class_">Password</span>: <span class="title class_">Harbor12345</span></span><br><span class="line"></span><br><span class="line">docker tag <span class="attr">centos</span>:<span class="number">7</span> reg.<span class="property">azhe</span>.<span class="property">com</span>/library/<span class="attr">centos</span>:<span class="number">7</span></span><br><span class="line">docker push reg.<span class="property">azhe</span>.<span class="property">com</span>/library/<span class="attr">centos</span>:<span class="number">7</span></span><br></pre></td></tr></table></figure>
<p><img src="/2022/05/25/Harbor%E9%83%A8%E7%BD%B2/F29DE1853ED34C21961D7A4A2EEB9CADclipboard.png" alt></p>
<p><img src="/2022/05/25/Harbor%E9%83%A8%E7%BD%B2/FF5C2BF9C43248F4AE5521F5F200F61Cclipboard.png" alt></p>
<p><img src="/2022/05/25/Harbor%E9%83%A8%E7%BD%B2/71319B66EA1E4E36A28CDFA7BE80681Eclipboard.png" alt></p>
<p>Harbor 运维维护</p>
<p><img src="/2022/05/25/Harbor%E9%83%A8%E7%BD%B2/4CBC3EA772514E54B38302F5409C461Aclipboard.png" alt></p>
<p>容器数据持久化目录：/data</p>
<p>日志文件目录：/var/log/harbor</p>
<p>PG数据库做好定期备份，里面存放用户数据文件。</p>
<p>主从复制，主harbor挂掉，启用备harbor，需要把pg数据导入到备harbor。</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA项目镜像构建：Tomcat</title>
    <url>/2022/05/23/JAVA%E9%A1%B9%E7%9B%AE%E9%95%9C%E5%83%8F%E6%9E%84%E5%BB%BA/</url>
    <content><![CDATA[<p>JAVA项目镜像构建：Tomcat</p>
<p>tomcat目录文件：1.apache-tomcat-8.5.43.tar.gz  2.Dockerfile   3.Dockerfile2  4.ROOT.war</p>
<p>Dockerfile（环境镜像）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">FROM</span> <span class="attr">centos</span>:<span class="number">7</span></span><br><span class="line"><span class="variable constant_">MAINTAINER</span> www.<span class="property">ctnrs</span>.<span class="property">com</span></span><br><span class="line"></span><br><span class="line"><span class="variable constant_">ENV</span> <span class="variable constant_">VERSION</span>=<span class="number">8.5</span><span class="number">.43</span></span><br><span class="line"></span><br><span class="line"><span class="variable constant_">RUN</span> yum install java-<span class="number">1.8</span><span class="number">.0</span>-openjdk wget curl unzip iproute net-tools -y &amp;&amp; \</span><br><span class="line">    yum clean all &amp;&amp; \</span><br><span class="line">    rm -rf /<span class="keyword">var</span>/cache/yum<span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">ADD apache-tomcat-$&#123;VERSION&#125;.tar.gz /usr/local/</span></span><br><span class="line"><span class="comment">RUN mv /usr/local/apache-tomcat-$&#123;VERSION&#125; /usr/local/tomcat &amp;&amp; \</span></span><br><span class="line"><span class="comment">    sed -i &#x27;1a JAVA_OPTS=&quot;-Djava.security.egd=file:/dev/./urandom&quot;&#x27; /usr/local/tomcat/bin/catalina.sh &amp;&amp; \</span></span><br><span class="line"><span class="comment">    ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">ENV PATH $PATH:/usr/local/tomcat/bin</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">WORKDIR /usr/local/tomcat</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">EXPOSE 8080</span></span><br><span class="line"><span class="comment">CMD [&quot;catalina.sh&quot;, &quot;run&quot;]</span></span><br><span class="line"><span class="comment"></span></span><br></pre></td></tr></table></figure>
<p>Dockerfile2 (基于环境镜像打包的项目镜像）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">FROM</span> <span class="attr">tomcat</span>:v1</span><br><span class="line"><span class="variable constant_">RUN</span> rm -rf /usr/local/tomcat/webapps<span class="comment">/*</span></span><br><span class="line"><span class="comment">COPY ROOT.war /usr/local/tomcat/webapps</span></span><br></pre></td></tr></table></figure>
<p>构建镜像</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cd tomcat/</span><br><span class="line">docker build -t <span class="attr">tomcat</span>:v1 .</span><br><span class="line">docker build -t <span class="attr">tomcat</span>:v2 -f <span class="title class_">Dockerfile2</span> .</span><br><span class="line">docker run -d -p <span class="number">8888</span>:<span class="number">8080</span> --name tomcat <span class="attr">tomcat</span>:v2</span><br></pre></td></tr></table></figure>
<p>访问tomcat 8888端口</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">http</span>:<span class="comment">//192.168.0.11:8888/</span></span><br></pre></td></tr></table></figure>
<p>JAVA微服务镜像构建：Jar</p>
<p>java目录文件:1.Dockerfile  2.hello.jar</p>
<p>Dockerfile(基于环境镜像打包的项目镜像）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">FROM</span> <span class="attr">java</span>:<span class="number">8</span>-jdk-alpine</span><br><span class="line"><span class="variable constant_">LABEL</span> maintainer www.<span class="property">ctnrs</span>.<span class="property">com</span></span><br><span class="line"><span class="variable constant_">ENV</span> <span class="variable constant_">JAVA_OPTS</span>=<span class="string">&quot;$JAVA_OPTS -Dfile.encoding=UTF8 -Duser.timezone=GMT+08&quot;</span></span><br><span class="line"><span class="variable constant_">RUN</span> sed -i <span class="string">&#x27;s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g&#x27;</span> /etc/apk/repositories &amp;&amp; \</span><br><span class="line">    apk add -U tzdata &amp;&amp; \</span><br><span class="line">    ln -sf /usr/share/zoneinfo/<span class="title class_">Asia</span>/<span class="title class_">Shanghai</span> /etc/localtime</span><br><span class="line"><span class="variable constant_">COPY</span> hello.<span class="property">jar</span> /</span><br><span class="line"><span class="variable constant_">EXPOSE</span> <span class="number">8888</span></span><br><span class="line"><span class="variable constant_">CMD</span> [<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;java -jar $JAVA_OPTS /hello.jar&quot;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>编写Dockerfile最佳实践</p>
<p>减少镜像层：一次RUN指令形成新的一层，尽量Shell命令都写在一行，减少镜像层。</p>
<p>优化镜像大小：一次RUN形成新的一层，如果没有在同一层删除，无论文件是否最后删除， 都会带到下一层，所以要在每一层清理对应的残留数据，减小镜像大小。</p>
<p>减少网络传输时间：例如软件包、mvn仓库等</p>
<p>多阶段构建：代码编译、部署在一个Dockerfile完成，只会保留部署阶段产生数据。</p>
<p>选择最小的基础镜像：例如alpine</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2024/05/21/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start">Quick Start</h2>
<h3 id="Create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Docker构建企业Jenkins平台</title>
    <url>/2022/05/27/%E5%9F%BA%E4%BA%8EDocker%E6%9E%84%E5%BB%BA%E4%BC%81%E4%B8%9AJenkins%E5%B9%B3%E5%8F%B0/</url>
    <content><![CDATA[<p>CI/CD概述</p>
<p>持续集成（Continuous Integration，CI）：代码合并、构建、部署、测试都在一起，不断地执行这个过程，并对结果反馈。</p>
<p>持续部署（Continuous Deployment，CD）：部署到测试环境、预生产环境、生产环境。</p>
<p>持续交付（Continuous Delivery，CD）：将最终产品发布到生产环境，给用户使用。</p>
<p><img src="/2022/05/27/%E5%9F%BA%E4%BA%8EDocker%E6%9E%84%E5%BB%BA%E4%BC%81%E4%B8%9AJenkins%E5%B9%B3%E5%8F%B0/D06234A999FE473FBA13400A79F2390Aclipboard.png" alt></p>
<p>CI工作流程设计</p>
<p><img src="/2022/05/27/%E5%9F%BA%E4%BA%8EDocker%E6%9E%84%E5%BB%BA%E4%BC%81%E4%B8%9AJenkins%E5%B9%B3%E5%8F%B0/3C3FFAC3EFE24641B2E3746166FFDD5Eclipboard.png" alt></p>
<p>开发者提交代码到gitlab仓库，gitlab随后触发jenkins代码编译，构建镜像以及推送镜像到harbor仓库，紧接着Jenkins部署到docker主机（从harbor仓库拉取镜像到本地部署启动）。</p>
<table>
<thead>
<tr>
<th>gitlab主机</th>
<th>jenkins主机</th>
<th>harbor主机</th>
</tr>
</thead>
<tbody>
<tr>
<td>192.168.0.11/24</td>
<td>192.168.0.13/24</td>
<td>192.168.0.12/24</td>
</tr>
</tbody>
</table>
<pre><code>                                                       项目环境表
</code></pre>
<p>1、部署Gitlab</p>
<p>1.1 部署Gitlab</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">mkdir gitlab</span><br><span class="line">cd gitlab</span><br><span class="line">docker run -d \</span><br><span class="line">  --name gitlab \</span><br><span class="line">  -p <span class="number">8443</span>:<span class="number">443</span> \</span><br><span class="line">  -p <span class="number">9999</span>:<span class="number">80</span> \</span><br><span class="line">  -p <span class="number">9998</span>:<span class="number">22</span> \</span><br><span class="line">  -v $PWD/<span class="attr">config</span>:<span class="regexp">/etc/gi</span>tlab \</span><br><span class="line">  -v $PWD/<span class="attr">logs</span>:<span class="regexp">/var/</span>log/gitlab \</span><br><span class="line">  -v $PWD/<span class="attr">data</span>:<span class="regexp">/var/</span>opt/gitlab \</span><br><span class="line">  -v /etc/<span class="attr">localtime</span>:<span class="regexp">/etc/</span>localtime \</span><br><span class="line">  --restart=always \</span><br><span class="line">  lizhenliang/gitlab-ce-<span class="attr">zh</span>:latest</span><br></pre></td></tr></table></figure>
<p>访问地址：<a href="http://IP:9999">http://IP:9999</a></p>
<p>初次会先设置管理员密码 ，然后登陆，默认管理员用户名root，密码就是刚设置的。</p>
<p>1.2 创建项目，提交测试代码</p>
<p>进入后先创建项目，提交代码，以便后面测试。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">unzip tomcat-java-demo-master.<span class="property">zip</span></span><br><span class="line">cd tomcat-java-demo-master</span><br><span class="line">git init</span><br><span class="line">git remote add origin <span class="attr">http</span>:<span class="comment">//192.168.0.11:9999/root/java-demo.git</span></span><br><span class="line">git add .</span><br><span class="line">git config --<span class="variable language_">global</span> user.<span class="property">email</span> <span class="string">&quot;you@example.com&quot;</span></span><br><span class="line">git config --<span class="variable language_">global</span> user.<span class="property">name</span> <span class="string">&quot;Your Name&quot;</span></span><br><span class="line">git commit -m <span class="string">&#x27;all&#x27;</span></span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>
<p>2、部署Harbor镜像仓库</p>
<p>2.1 安装docker与docker-compose</p>
<p>2.2 解压离线包部署</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># tar zxvf harbor-offline-installer-v2<span class="number">.0</span><span class="number">.0</span>.<span class="property">tgz</span></span><br><span class="line"># cd harbor</span><br><span class="line"># cp harbor.<span class="property">yml</span>.<span class="property">tmpl</span> harbor.<span class="property">yml</span></span><br><span class="line"># vi harbor.<span class="property">yml</span></span><br><span class="line"><span class="attr">hostname</span>: reg.<span class="property">ctnrs</span>.<span class="property">com</span></span><br><span class="line"><span class="attr">https</span>:   # 先注释https相关配置</span><br><span class="line"><span class="attr">harbor_admin_password</span>: <span class="title class_">Harbor12345</span></span><br><span class="line"># ./prepare</span><br><span class="line"># ./install.<span class="property">sh</span></span><br></pre></td></tr></table></figure>
<p>2.3 在Jenkins主机配置Docker可信任，如果是HTTPS需要拷贝证书</p>
<p>由于habor未配置https，还需要在docker配置可信任。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># cat /etc/docker/daemon.<span class="property">json</span> </span><br><span class="line">&#123;<span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://b9pmyelo.mirror.aliyuncs.com&quot;</span>],</span><br><span class="line">  <span class="string">&quot;insecure-registries&quot;</span>: [<span class="string">&quot;192.168.0.12&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"># systemctl restart docker</span><br></pre></td></tr></table></figure>
<p>2.4 构建tomcat镜像并上传到harbor仓库上（供jenkinsfile脚本调用）</p>
<p>#准备的安装包（apache-tomcat-8.5.43.tar.gz）和Dockerfile</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">FROM</span> <span class="attr">centos</span>:<span class="number">7</span></span><br><span class="line"><span class="variable constant_">MAINTAINER</span> www.<span class="property">ctnrs</span>.<span class="property">com</span></span><br><span class="line"></span><br><span class="line"><span class="variable constant_">ENV</span> <span class="variable constant_">VERSION</span>=<span class="number">8.5</span><span class="number">.43</span></span><br><span class="line"></span><br><span class="line"><span class="variable constant_">RUN</span> yum install java-<span class="number">1.8</span><span class="number">.0</span>-openjdk wget curl unzip iproute net-tools -y &amp;&amp; \</span><br><span class="line">    yum clean all &amp;&amp; \</span><br><span class="line">    rm -rf /<span class="keyword">var</span>/cache/yum<span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">ADD apache-tomcat-$&#123;VERSION&#125;.tar.gz /usr/local/</span></span><br><span class="line"><span class="comment">RUN mv /usr/local/apache-tomcat-$&#123;VERSION&#125; /usr/local/tomcat &amp;&amp; \</span></span><br><span class="line"><span class="comment">    sed -i &#x27;1a JAVA_OPTS=&quot;-Djava.security.egd=file:/dev/./urandom&quot;&#x27; /usr/local/tomcat/bin/catalina.sh &amp;&amp; \</span></span><br><span class="line"><span class="comment">    ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">ENV PATH $PATH:/usr/local/tomcat/bin</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">WORKDIR /usr/local/tomcat</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">EXPOSE 8080</span></span><br><span class="line"><span class="comment">CMD [&quot;catalina.sh&quot;, &quot;run&quot;]</span></span><br><span class="line"><span class="comment"></span></span><br></pre></td></tr></table></figure>
<p>构建并上传到harbor</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">docker build -t <span class="number">192.168</span><span class="number">.0</span><span class="number">.12</span>/library/<span class="attr">tomcat</span>:v1 .</span><br><span class="line">docker login <span class="number">192.168</span><span class="number">.0</span><span class="number">.12</span></span><br><span class="line">docker images</span><br><span class="line">docker push <span class="number">192.168</span><span class="number">.0</span><span class="number">.12</span>/library/<span class="attr">tomcat</span>:v1</span><br></pre></td></tr></table></figure>
<p><img src="/2022/05/27/%E5%9F%BA%E4%BA%8EDocker%E6%9E%84%E5%BB%BA%E4%BC%81%E4%B8%9AJenkins%E5%B9%B3%E5%8F%B0/725360157F1C4DF0B88A2EDA4C641CA8clipboard.png" alt></p>
<p>3、部署Jenkins</p>
<p>3.1 准备JDK和Maven环境</p>
<p>将二进制包上传到服务器并解压到工作目录，用于让Jenkins容器挂载使用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># tar zxvf jdk-8u45-linux-x64.<span class="property">tar</span>.<span class="property">gz</span></span><br><span class="line"># mv jdk1<span class="number">.8</span><span class="number">.0_45</span> /usr/local/jdk</span><br><span class="line"># tar zxf apache-maven-<span class="number">3.5</span><span class="number">.0</span>-bin.<span class="property">tar</span>.<span class="property">gz</span></span><br><span class="line"># mv apache-maven-<span class="number">3.5</span><span class="number">.0</span> /usr/local/maven</span><br></pre></td></tr></table></figure>
<p>修改Maven源：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">vi /usr/local/maven/conf/setting.<span class="property">xml</span></span><br><span class="line"></span><br><span class="line">&lt;mirrors&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span>     </span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>central<span class="tag">&lt;/<span class="name">id</span>&gt;</span>     </span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>     </span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span>     </span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;/mirrors&gt;</span><br></pre></td></tr></table></figure>
<p>部署jenkins</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">docker run -d --name jenkins -p <span class="number">80</span>:<span class="number">8080</span> -p <span class="number">50000</span>:<span class="number">50000</span> -u root  \</span><br><span class="line">   -v /opt/<span class="attr">jenkins_home</span>:<span class="regexp">/var/</span>jenkins_home \</span><br><span class="line">   -v /<span class="keyword">var</span>/run/docker.<span class="property">sock</span>:<span class="regexp">/var/</span>run/docker.<span class="property">sock</span>   \</span><br><span class="line">   -v /usr/bin/<span class="attr">docker</span>:<span class="regexp">/usr/</span>bin/docker \</span><br><span class="line">   -v /usr/local/<span class="attr">maven</span>:<span class="regexp">/usr/</span>local/maven \</span><br><span class="line">   -v /usr/local/<span class="attr">jdk</span>:<span class="regexp">/usr/</span>local/jdk \</span><br><span class="line">   -v /etc/<span class="attr">localtime</span>:<span class="regexp">/etc/</span>localtime \</span><br><span class="line">   --restart=always \</span><br><span class="line">   --name jenkins jenkins/jenkins</span><br></pre></td></tr></table></figure>
<p>访问地址：<a href="http://IP">http://IP</a></p>
<p>3.2 安装插件</p>
<p>管理Jenkins-&gt;系统配置–&gt;管理插件**–&gt;搜索git/pipeline，选中点击安装。</p>
<p>默认从国外网络下载插件，会比较慢，建议修改国内源：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cd /opt/jenkins_home/updates</span><br><span class="line">sed -i <span class="string">&#x27;s/http:\/\/updates.jenkins-ci.org\/download/https:\/\/mirrors.tuna.tsinghua.edu.cn\/jenkins/g&#x27;</span> <span class="keyword">default</span>.<span class="property">json</span> &amp;&amp; \</span><br><span class="line">sed -i <span class="string">&#x27;s/http:\/\/www.google.com/https:\/\/www.baidu.com/g&#x27;</span> <span class="keyword">default</span>.<span class="property">json</span></span><br><span class="line"></span><br><span class="line">docker restart jenkins</span><br></pre></td></tr></table></figure>
<p>3.3 Jenkins Pipeline介绍</p>
<p>Jenkins Pipeline是一套插件，支持在Jenkins中实现集成和持续交付管道；</p>
<p>Pipeline通过特定语法对简单到复杂的传输管道进行建模；</p>
<p>声明式：遵循与Groovy相同语法。pipeline { }</p>
<p>脚本式：支持Groovy大部分功能，也是非常表达和灵活的工具。node { }</p>
<p>Jenkins Pipeline的定	义被写入一个文本文件，称为Jenkinsfile。</p>
<p><img src="/2022/05/27/%E5%9F%BA%E4%BA%8EDocker%E6%9E%84%E5%BB%BA%E4%BC%81%E4%B8%9AJenkins%E5%B9%B3%E5%8F%B0/A721BDDA11234FEFBB2D6AFBA3C673CAclipboard.png" alt></p>
<p><img src="/2022/05/27/%E5%9F%BA%E4%BA%8EDocker%E6%9E%84%E5%BB%BA%E4%BC%81%E4%B8%9AJenkins%E5%B9%B3%E5%8F%B0/3EAC878934A84E509B25BFCF9A463E62clipboard.png" alt></p>
<p><img src="/2022/05/27/%E5%9F%BA%E4%BA%8EDocker%E6%9E%84%E5%BB%BA%E4%BC%81%E4%B8%9AJenkins%E5%B9%B3%E5%8F%B0/A3A3BF02751C4D79B7ACEC54F86C0CDFclipboard.png" alt></p>
<p>注意： 发布之前可以在jenkins主机上测试一下是否能登录harbor仓库</p>
<p>如果不能登录报错为连接443拒绝，那么请使用以下方式解决：</p>
<p>修改Docker启动文件添加“–insecure-registry 192.168.0.12”</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">vim /usr/lib/systemd/system/docker.<span class="property">service</span> </span><br><span class="line"><span class="title class_">ExecStart</span>=<span class="regexp">/usr/</span>bin/dockerd -H <span class="attr">fd</span>:<span class="comment">// --containerd=/run/containerd/containerd.sock --insecure-registry 192.168.0.12</span></span><br><span class="line"></span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>
<p>4、发布测试</p>
<p>4.1添加连接git仓库凭据和harbor仓库凭据</p>
<p>管理Jenkins-&gt;安全–&gt;管理凭据-&gt;Jnekins-&gt;添加凭据-&gt;Username with password</p>
<ul>
<li>
<p>Username：用户名</p>
</li>
<li>
<p>Password：密码</p>
</li>
<li>
<p>ID：留空</p>
</li>
<li>
<p>Description：描述</p>
</li>
</ul>
<p>分别添加连接git和harbor凭据，并修改脚本为实际凭据ID。</p>
<p><img src="/2022/05/27/%E5%9F%BA%E4%BA%8EDocker%E6%9E%84%E5%BB%BA%E4%BC%81%E4%B8%9AJenkins%E5%B9%B3%E5%8F%B0/028FE8C5C63C44E19CBEECC88334DC65clipboard.png" alt></p>
<p>4.2 创建项目并配置</p>
<p>New Item -&gt; Pipeline -&gt; This project is parameterized -&gt; String Parameter</p>
<ul>
<li>
<p>Name：Branch    # 变量名，下面脚本中调用</p>
</li>
<li>
<p>Default Value：master   # 默认分支</p>
</li>
<li>
<p>Description：发布的代码分支  # 描述</p>
</li>
</ul>
<p><img src="/2022/05/27/%E5%9F%BA%E4%BA%8EDocker%E6%9E%84%E5%BB%BA%E4%BC%81%E4%B8%9AJenkins%E5%B9%B3%E5%8F%B0/7A9EA62F8A9F4D97991A4AB427F6EDC5clipboard.png" alt></p>
<p>4.3 Pipeline脚本（在Jenkins本地机器上部署并启动容器）</p>
<p>一. 添加注释方便查看使用说明（添加注释到jenkins执行会报错，请使用第二个构建）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">#!<span class="regexp">/usr/</span>bin/env groovy</span><br><span class="line"></span><br><span class="line">def registry = <span class="string">&quot;192.168.0.12&quot;</span>      #harbor仓库地址</span><br><span class="line">def project = <span class="string">&quot;dev&quot;</span>                #harbor仓库项目名</span><br><span class="line">def app_name = <span class="string">&quot;java-demo&quot;</span>         #镜像的应用名</span><br><span class="line">def image_name = <span class="string">&quot;$&#123;registry&#125;/$&#123;project&#125;/$&#123;app_name&#125;:$&#123;Branch&#125;-$&#123;BUILD_NUMBER&#125;&quot;</span>  #<span class="title class_">Branch</span>代表引用的分支名</span><br><span class="line">                                                                                 #<span class="variable constant_">BUILD_NUMBER</span>代表构建编号</span><br><span class="line">def git_address = <span class="string">&quot;http://192.168.0.11:9999/root/java-demo.git&quot;</span>        #git仓库连接地址</span><br><span class="line">def docker_registry_auth = <span class="string">&quot;30fae7e1-22c4-4083-848f-a5e90eff9e1f&quot;</span>      #harbor仓库认证（用户名和密码）</span><br><span class="line">def git_auth = <span class="string">&quot;05750892-5303-49ab-a6d0-33a78ef6c839&quot;</span>                  #git仓库认证（用户名和密码）</span><br><span class="line"></span><br><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    stages &#123;</span><br><span class="line">        <span class="title function_">stage</span>(<span class="params"><span class="string">&#x27;拉取代码&#x27;</span></span>)&#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">              <span class="title function_">checkout</span>([<span class="attr">$class</span>: <span class="string">&#x27;GitSCM&#x27;</span>, <span class="attr">branches</span>: [[<span class="attr">name</span>: <span class="string">&#x27;$&#123;Branch&#125;&#x27;</span>]], <span class="attr">userRemoteConfigs</span>: [[<span class="attr">credentialsId</span>: <span class="string">&quot;$&#123;git_auth&#125;&quot;</span>, <span class="attr">url</span>: <span class="string">&quot;$&#123;git_address&#125;&quot;</span>]]])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">stage</span>(<span class="params"><span class="string">&#x27;代码编译&#x27;</span></span>)&#123;</span><br><span class="line">           steps &#123;</span><br><span class="line">             sh <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">                pwd</span></span><br><span class="line"><span class="string">                ls</span></span><br><span class="line"><span class="string">                JAVA_HOME=/usr/local/jdk</span></span><br><span class="line"><span class="string">                PATH=$JAVA_HOME/bin:/usr/local/maven/bin:$PATH</span></span><br><span class="line"><span class="string">                mvn clean package -Dmaven.test.skip=true</span></span><br><span class="line"><span class="string">                &quot;</span><span class="string">&quot;&quot;</span> </span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">stage</span>(<span class="params"><span class="string">&#x27;构建镜像&#x27;</span></span>)&#123;</span><br><span class="line">           steps &#123;</span><br><span class="line">                <span class="title function_">withCredentials</span>(<span class="params">[usernamePassword(credentialsId: <span class="string">&quot;$&#123;docker_registry_auth&#125;&quot;</span>, passwordVariable: <span class="string">&#x27;password&#x27;</span>, usernameVariable: <span class="string">&#x27;username&#x27;</span>)]</span>) &#123;</span><br><span class="line">                sh <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">                  echo &#x27;</span></span><br><span class="line"><span class="string">                    FROM $&#123;registry&#125;/library/tomcat:v1</span></span><br><span class="line"><span class="string">                    LABEL maitainer liuzhe</span></span><br><span class="line"><span class="string">                    RUN rm -rf /usr/local/tomcat/webapps/*</span></span><br><span class="line"><span class="string">                    ADD target/*.war /usr/local/tomcat/webapps/ROOT.war</span></span><br><span class="line"><span class="string">                  &#x27; &gt; Dockerfile</span></span><br><span class="line"><span class="string">                  docker build -t $&#123;image_name&#125; .</span></span><br><span class="line"><span class="string">                  docker login -u $&#123;username&#125; -p &#x27;$&#123;password&#125;&#x27; $&#123;registry&#125;</span></span><br><span class="line"><span class="string">                  docker push $&#123;image_name&#125;</span></span><br><span class="line"><span class="string">                &quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">           &#125; </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">stage</span>(<span class="params"><span class="string">&#x27;部署到Docker&#x27;</span></span>)&#123;</span><br><span class="line">           steps &#123;</span><br><span class="line">              sh <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">              docker rm -f tomcat-java-demo |true</span></span><br><span class="line"><span class="string">              docker container run -d --name tomcat-java-demo -p 88:8080 $&#123;image_name&#125;</span></span><br><span class="line"><span class="string">              &quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>二.请使用这个pipeline脚本构建</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">#!<span class="regexp">/usr/</span>bin/env groovy</span><br><span class="line"></span><br><span class="line">def registry = <span class="string">&quot;192.168.0.12&quot;</span>      </span><br><span class="line">def project = <span class="string">&quot;dev&quot;</span>                </span><br><span class="line">def app_name = <span class="string">&quot;java-demo&quot;</span>        </span><br><span class="line">def image_name = <span class="string">&quot;$&#123;registry&#125;/$&#123;project&#125;/$&#123;app_name&#125;:$&#123;Branch&#125;-$&#123;BUILD_NUMBER&#125;&quot;</span>                                                                                </span><br><span class="line">def git_address = <span class="string">&quot;http://192.168.0.11:9999/root/java-demo.git&quot;</span>      </span><br><span class="line">def docker_registry_auth = <span class="string">&quot;30fae7e1-22c4-4083-848f-a5e90eff9e1f&quot;</span>     </span><br><span class="line">def git_auth = <span class="string">&quot;05750892-5303-49ab-a6d0-33a78ef6c839&quot;</span>                  </span><br><span class="line"></span><br><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    stages &#123;</span><br><span class="line">        <span class="title function_">stage</span>(<span class="params"><span class="string">&#x27;拉取代码&#x27;</span></span>)&#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">              <span class="title function_">checkout</span>([<span class="attr">$class</span>: <span class="string">&#x27;GitSCM&#x27;</span>, <span class="attr">branches</span>: [[<span class="attr">name</span>: <span class="string">&#x27;$&#123;Branch&#125;&#x27;</span>]], <span class="attr">userRemoteConfigs</span>: [[<span class="attr">credentialsId</span>: <span class="string">&quot;$&#123;git_auth&#125;&quot;</span>, <span class="attr">url</span>: <span class="string">&quot;$&#123;git_address&#125;&quot;</span>]]])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">stage</span>(<span class="params"><span class="string">&#x27;代码编译&#x27;</span></span>)&#123;</span><br><span class="line">           steps &#123;</span><br><span class="line">             sh <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">                pwd</span></span><br><span class="line"><span class="string">                ls</span></span><br><span class="line"><span class="string">                JAVA_HOME=/usr/local/jdk</span></span><br><span class="line"><span class="string">                PATH=$JAVA_HOME/bin:/usr/local/maven/bin:$PATH</span></span><br><span class="line"><span class="string">                mvn clean package -Dmaven.test.skip=true</span></span><br><span class="line"><span class="string">                &quot;</span><span class="string">&quot;&quot;</span> </span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">stage</span>(<span class="params"><span class="string">&#x27;构建镜像&#x27;</span></span>)&#123;</span><br><span class="line">           steps &#123;</span><br><span class="line">                <span class="title function_">withCredentials</span>(<span class="params">[usernamePassword(credentialsId: <span class="string">&quot;$&#123;docker_registry_auth&#125;&quot;</span>, passwordVariable: <span class="string">&#x27;password&#x27;</span>, usernameVariable: <span class="string">&#x27;username&#x27;</span>)]</span>) &#123;</span><br><span class="line">                sh <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">                  echo &#x27;</span></span><br><span class="line"><span class="string">                    FROM $&#123;registry&#125;/library/tomcat:v1</span></span><br><span class="line"><span class="string">                    LABEL maitainer liuzhe</span></span><br><span class="line"><span class="string">                    RUN rm -rf /usr/local/tomcat/webapps/*</span></span><br><span class="line"><span class="string">                    ADD target/*.war /usr/local/tomcat/webapps/ROOT.war</span></span><br><span class="line"><span class="string">                  &#x27; &gt; Dockerfile</span></span><br><span class="line"><span class="string">                  docker build -t $&#123;image_name&#125; .</span></span><br><span class="line"><span class="string">                  docker login -u $&#123;username&#125; -p &#x27;$&#123;password&#125;&#x27; $&#123;registry&#125;</span></span><br><span class="line"><span class="string">                  docker push $&#123;image_name&#125;</span></span><br><span class="line"><span class="string">                &quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">           &#125; </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">stage</span>(<span class="params"><span class="string">&#x27;部署到Docker&#x27;</span></span>)&#123;</span><br><span class="line">           steps &#123;</span><br><span class="line">              sh <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">              docker rm -f tomcat-java-demo |true</span></span><br><span class="line"><span class="string">              docker container run -d --name tomcat-java-demo -p 88:8080 $&#123;image_name&#125;</span></span><br><span class="line"><span class="string">              &quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述脚本中，docker_registry_auth 和git_auth变量的值为Jenkins凭据ID，添加凭据后修改。</p>
<p>4.4 Pipeline脚本（ 在其他的Docker主机上部署并启动容器）</p>
<p>安装jenkins插件</p>
<p>插件名称： SSH Pipeline Steps</p>
<p>使用说明: <a href="https://github.com/jenkinsci/ssh-steps-plugin#pipeline-steps">https://github.com/jenkinsci/ssh-steps-plugin#pipeline-steps</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">#!<span class="regexp">/usr/</span>bin/env groovy</span><br><span class="line"></span><br><span class="line">def registry = <span class="string">&quot;192.168.0.12&quot;</span>      </span><br><span class="line">def project = <span class="string">&quot;dev&quot;</span>                </span><br><span class="line">def app_name = <span class="string">&quot;java-demo&quot;</span>        </span><br><span class="line">def image_name = <span class="string">&quot;$&#123;registry&#125;/$&#123;project&#125;/$&#123;app_name&#125;:$&#123;Branch&#125;-$&#123;BUILD_NUMBER&#125;&quot;</span>                                                                                </span><br><span class="line">def git_address = <span class="string">&quot;http://192.168.0.11:9999/root/java-demo.git&quot;</span>      </span><br><span class="line">def docker_registry_auth = <span class="string">&quot;30fae7e1-22c4-4083-848f-a5e90eff9e1f&quot;</span>     </span><br><span class="line">def git_auth = <span class="string">&quot;05750892-5303-49ab-a6d0-33a78ef6c839&quot;</span>   </span><br><span class="line">def remote = [:]</span><br><span class="line">    remote.<span class="property">name</span> = <span class="string">&quot;test&quot;</span></span><br><span class="line">    remote.<span class="property">host</span> = <span class="string">&quot;192.168.0.12&quot;</span></span><br><span class="line">    remote.<span class="property">user</span> = <span class="string">&#x27;root&#x27;</span></span><br><span class="line">    remote.<span class="property">password</span> = <span class="string">&#x27;123.com&#x27;</span></span><br><span class="line">    remote.<span class="property">allowAnyHosts</span> = <span class="literal">true</span></span><br><span class="line">  </span><br><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    stages &#123;</span><br><span class="line">        <span class="title function_">stage</span>(<span class="params"><span class="string">&#x27;拉取代码&#x27;</span></span>)&#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">              <span class="title function_">checkout</span>([<span class="attr">$class</span>: <span class="string">&#x27;GitSCM&#x27;</span>, <span class="attr">branches</span>: [[<span class="attr">name</span>: <span class="string">&#x27;$&#123;Branch&#125;&#x27;</span>]], <span class="attr">userRemoteConfigs</span>: [[<span class="attr">credentialsId</span>: <span class="string">&quot;$&#123;git_auth&#125;&quot;</span>, <span class="attr">url</span>: <span class="string">&quot;$&#123;git_address&#125;&quot;</span>]]])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">stage</span>(<span class="params"><span class="string">&#x27;代码编译&#x27;</span></span>)&#123;</span><br><span class="line">           steps &#123;</span><br><span class="line">             sh <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">                pwd</span></span><br><span class="line"><span class="string">                ls</span></span><br><span class="line"><span class="string">                JAVA_HOME=/usr/local/jdk</span></span><br><span class="line"><span class="string">                PATH=$JAVA_HOME/bin:/usr/local/maven/bin:$PATH</span></span><br><span class="line"><span class="string">                mvn clean package -Dmaven.test.skip=true</span></span><br><span class="line"><span class="string">                &quot;</span><span class="string">&quot;&quot;</span> </span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">stage</span>(<span class="params"><span class="string">&#x27;构建镜像&#x27;</span></span>)&#123;</span><br><span class="line">           steps &#123;</span><br><span class="line">                <span class="title function_">withCredentials</span>(<span class="params">[usernamePassword(credentialsId: <span class="string">&quot;$&#123;docker_registry_auth&#125;&quot;</span>, passwordVariable: <span class="string">&#x27;password&#x27;</span>, usernameVariable: <span class="string">&#x27;username&#x27;</span>)]</span>) &#123;</span><br><span class="line">                sh <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">                  echo &#x27;</span></span><br><span class="line"><span class="string">                    FROM $&#123;registry&#125;/library/tomcat:v1</span></span><br><span class="line"><span class="string">                    LABEL maitainer liuzhe</span></span><br><span class="line"><span class="string">                    RUN rm -rf /usr/local/tomcat/webapps/*</span></span><br><span class="line"><span class="string">                    ADD target/*.war /usr/local/tomcat/webapps/ROOT.war</span></span><br><span class="line"><span class="string">                  &#x27; &gt; Dockerfile</span></span><br><span class="line"><span class="string">                  docker build -t $&#123;image_name&#125; .</span></span><br><span class="line"><span class="string">                  docker login -u $&#123;username&#125; -p &#x27;$&#123;password&#125;&#x27; $&#123;registry&#125;</span></span><br><span class="line"><span class="string">                  docker push $&#123;image_name&#125;</span></span><br><span class="line"><span class="string">                &quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">           &#125; </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">stage</span>(<span class="params"><span class="string">&#x27;部署到Docker&#x27;</span></span>)&#123;</span><br><span class="line">           steps &#123;</span><br><span class="line">                sshCommand <span class="attr">remote</span>: remote, <span class="attr">command</span>: <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">                ip a</span></span><br><span class="line"><span class="string">                docker rm -f tomcat-java-demo |true</span></span><br><span class="line"><span class="string">                docker pull $&#123;image_name&#125; </span></span><br><span class="line"><span class="string">                docker container run -d --name tomcat-java-demo -p 88:8080 $&#123;image_name&#125;</span></span><br><span class="line"><span class="string">               &quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">           &#125;    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>验证：</p>
<p>1.访问harbor仓库查看是否有上传的镜像    <a href="http://192.168.0.12/">http://192.168.0.12/</a></p>
<p><img src="/2022/05/27/%E5%9F%BA%E4%BA%8EDocker%E6%9E%84%E5%BB%BA%E4%BC%81%E4%B8%9AJenkins%E5%B9%B3%E5%8F%B0/04418B7661DC49D1AD92114AC38F5A64clipboard.png" alt></p>
<p>2.docker主机上运行的项目镜像容器</p>
<p><img src="/2022/05/27/%E5%9F%BA%E4%BA%8EDocker%E6%9E%84%E5%BB%BA%E4%BC%81%E4%B8%9AJenkins%E5%B9%B3%E5%8F%B0/03E31D0090E748B5B3B8416B4C4EEC4Cclipboard.png" alt></p>
<p>3.访问部署java-demo示例     <a href="http://192.168.0.13:88/">http://192.168.0.13:88/</a></p>
<p><img src="/2022/05/27/%E5%9F%BA%E4%BA%8EDocker%E6%9E%84%E5%BB%BA%E4%BC%81%E4%B8%9AJenkins%E5%B9%B3%E5%8F%B0/5DF2722940214B15AB62A6AA70E96839clipboard.png" alt></p>
<p>CI/CD收益</p>
<p>高效的CI/CD环境可以获得：</p>
<p>1.及时发现问题</p>
<p>2.大幅度减少故障率</p>
<p>3.加快迭代速度</p>
<p>4.减少时间成本</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>实现Docker容器多主机通信</title>
    <url>/2022/05/26/%E5%AE%9E%E7%8E%B0Docker%E5%AE%B9%E5%99%A8%E5%A4%9A%E4%B8%BB%E6%9C%BA%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<p>跨主机网络：实现Docker容器多主机通信</p>
<p>Flannel是CoreOS维护的一个网络组件，在每个主机上运行守护 进程负责维护本地路由转发，Flannel使用ETCD来存储容器网络 与主机之前的关系。</p>
<p>其他主流容器跨主机网络方案：</p>
<p>• Weave</p>
<p>• Calico</p>
<p>• OpenvSwitch</p>
<p><img src="/2022/05/26/%E5%AE%9E%E7%8E%B0Docker%E5%AE%B9%E5%99%A8%E5%A4%9A%E4%B8%BB%E6%9C%BA%E9%80%9A%E4%BF%A1/10B81BDFE6B2495FB1B335FAC555BF8Dclipboard.png" alt></p>
<p>1、etcd安装并配置（任意找一台节点安装即可）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">yum -y install etcd</span><br><span class="line">vim /etc/etcd/etcd.<span class="property">conf</span> </span><br><span class="line"><span class="variable constant_">ETCD_DATA_DIR</span>=<span class="string">&quot;/var/lib/etcd/default.etcd&quot;</span></span><br><span class="line"><span class="variable constant_">ETCD_LISTEN_CLIENT_URLS</span>=<span class="string">&quot;http://192.168.0.11:2379&quot;</span></span><br><span class="line"><span class="variable constant_">ETCD_NAME</span>=<span class="string">&quot;default&quot;</span></span><br><span class="line"><span class="variable constant_">ETCD_ADVERTISE_CLIENT_URLS</span>=<span class="string">&quot;http://192.168.0.11:2379&quot;</span></span><br><span class="line">systemctl start etcd</span><br><span class="line">systemctl enable etcd</span><br><span class="line">ss -anpt |grep <span class="number">2379</span></span><br></pre></td></tr></table></figure>
<p>2、flanneld安装并配置（两台跨主机的docker主机安装）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">yum -y install flannel</span><br><span class="line">vim /etc/sysconfig/flanneld</span><br><span class="line"><span class="variable constant_">FLANNEL_ETCD_ENDPOINTS</span>=<span class="string">&quot;http://192.168.0.11:2379&quot;</span></span><br><span class="line"><span class="variable constant_">FLANNEL_ETCD_PREFIX</span>=<span class="string">&quot;/atomic.io/network&quot;</span></span><br></pre></td></tr></table></figure>
<p>3、向etcd写入子网启动并flanneld服务</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">etcdctl --endpoints=<span class="string">&quot;http://192.168.0.11:2379&quot;</span> set /atomic.<span class="property">io</span>/network/config <span class="string">&#x27;&#123; &quot;Network&quot;:&quot;172.17.0.0/16&quot;, &quot;Backend&quot;: &#123;&quot;Type&quot;: &quot;vxlan&quot;&#125;&#125; &#x27;</span></span><br><span class="line">etcdctl --endpoints=<span class="string">&quot;http://192.168.0.11:2379&quot;</span> get /atomic.<span class="property">io</span>/network/config </span><br><span class="line">systemctl start flanneld.<span class="property">service</span>  </span><br><span class="line">systemctl enable flanneld.<span class="property">service</span> </span><br></pre></td></tr></table></figure>
<p>4、配置Docker使用flannel生成的网络信息 (两台跨主机的docker主机配置）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">vim /usr/lib/systemd/system/docker.<span class="property">service</span></span><br><span class="line"><span class="title class_">EnvironmentFile</span>=<span class="regexp">/var/</span>run/flannel/docker</span><br><span class="line"><span class="title class_">ExecStart</span>=<span class="regexp">/usr/</span>bin/dockerd -H <span class="attr">fd</span>:<span class="comment">// --containerd=/run/containerd/containerd.sock $DOCKER_NETWORK_OPTIONS</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker </span><br><span class="line">ps -ef |grep docker</span><br></pre></td></tr></table></figure>
<p>5.两台跨主机的docker主机设置iptable转发策略为允许并重启服务（按顺序启动）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">iptables -P <span class="variable constant_">FORWARD</span> <span class="variable constant_">ACCEPT</span></span><br><span class="line">systemctl restart flanneld.<span class="property">service</span> </span><br><span class="line">systemctl restart docker.<span class="property">service</span></span><br></pre></td></tr></table></figure>
<p>6、在两台主机创建容器相互ping验证</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">docker run -it busybox sh</span><br><span class="line">ifconfig </span><br></pre></td></tr></table></figure>
<p>防火墙学习：</p>
<p><a href="https://www.cnblogs.com/shijiaqi1066/p/3812510.html">https://www.cnblogs.com/shijiaqi1066/p/3812510.html</a></p>
<p><a href="http://www.zsythink.net/archives/1199">http://www.zsythink.net/archives/1199</a></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>容器化搭建个人博客系统</title>
    <url>/2022/05/28/%E5%AE%B9%E5%99%A8%E5%8C%96%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>Dockerfile涉及相关的文件及安装包</p>
<p><a href="attachments/F00C39A38A9E42F1B5B1DB1B3DA7CB4Adockerfile.zip">dockerfile.zip</a></p>
<p><img src="/2022/05/28/%E5%AE%B9%E5%99%A8%E5%8C%96%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/418306A840FE4995A255CA27354E9163clipboard.png" alt></p>
<p>前端项目镜像构建与部署：Nginx</p>
<p>nginx目录文件: 1.Dockerfile 2.nginx-1.15.5.tar.gz 3.nginx.conf4.php.conf</p>
<p>Dockerfile</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">FROM</span> <span class="attr">centos</span>:<span class="number">7</span></span><br><span class="line"><span class="variable constant_">LABEL</span> maintainer www.<span class="property">ctnrs</span>.<span class="property">com</span></span><br><span class="line"><span class="variable constant_">RUN</span> yum install -y gcc gcc-c++ make \</span><br><span class="line">    openssl-devel pcre-devel gd-devel \</span><br><span class="line">    iproute net-tools telnet wget curl &amp;&amp; \</span><br><span class="line">    yum clean all &amp;&amp; \</span><br><span class="line">    rm -rf /<span class="keyword">var</span>/cache/yum<span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">ADD nginx-1.15.5.tar.gz /</span></span><br><span class="line"><span class="comment">RUN cd nginx-1.15.5 &amp;&amp; \</span></span><br><span class="line"><span class="comment">    ./configure --prefix=/usr/local/nginx \</span></span><br><span class="line"><span class="comment">    --with-http_ssl_module \</span></span><br><span class="line"><span class="comment">    --with-http_stub_status_module &amp;&amp; \</span></span><br><span class="line"><span class="comment">    make -j 4 &amp;&amp; make install &amp;&amp; \</span></span><br><span class="line"><span class="comment">    mkdir /usr/local/nginx/conf/vhost &amp;&amp; \</span></span><br><span class="line"><span class="comment">    cd / &amp;&amp; rm -rf nginx* &amp;&amp; \</span></span><br><span class="line"><span class="comment">    ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">ENV PATH $PATH:/usr/local/nginx/sbin</span></span><br><span class="line"><span class="comment">COPY nginx.conf /usr/local/nginx/conf/nginx.conf</span></span><br><span class="line"><span class="comment">WORKDIR /usr/local/nginx</span></span><br><span class="line"><span class="comment">EXPOSE 80</span></span><br><span class="line"><span class="comment">CMD [&quot;nginx&quot;, &quot;-g&quot;, &quot;daemon off;&quot;]</span></span><br><span class="line"><span class="comment"></span></span><br></pre></td></tr></table></figure>
<p>nginx.conf</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">user                 nobody;</span><br><span class="line">worker_processes     <span class="number">4</span>;</span><br><span class="line">worker_rlimit_nofile <span class="number">65535</span>;</span><br><span class="line"></span><br><span class="line">error_log  logs/error.<span class="property">log</span>  notice;</span><br><span class="line"></span><br><span class="line">pid        /<span class="keyword">var</span>/run/nginx.<span class="property">pid</span>;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    use epoll;</span><br><span class="line">    worker_connections  <span class="number">4096</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line"></span><br><span class="line">    include       mime.<span class="property">types</span>;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main <span class="string">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    access_log off;</span><br><span class="line">    keepalive_timeout  <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">    client_max_body_size         64m;</span><br><span class="line">    include /usr/local/nginx/conf/vhost<span class="comment">/*.conf;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    server &#123;</span></span><br><span class="line"><span class="comment">        listen 80;</span></span><br><span class="line"><span class="comment">        server_name localhost;</span></span><br><span class="line"><span class="comment">        index index.html;</span></span><br><span class="line"><span class="comment">        access_log logs/access.log;</span></span><br><span class="line"><span class="comment">        location / &#123;</span></span><br><span class="line"><span class="comment">            root html;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br></pre></td></tr></table></figure>
<p>php.conf</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen <span class="number">80</span>;</span><br><span class="line">    server_name example.<span class="property">ctnrs</span>.<span class="property">com</span>;</span><br><span class="line">    index index.<span class="property">php</span> index.<span class="property">html</span>;</span><br><span class="line"></span><br><span class="line">    access_log logs/www.<span class="property">ctnrs</span>.<span class="property">com_access</span>.<span class="property">log</span>;</span><br><span class="line">    error_log logs/www.<span class="property">ctnrs</span>.<span class="property">com_error</span>.<span class="property">log</span>;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root /wwwroot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~* \.<span class="property">php$</span> &#123;</span><br><span class="line">        root /wwwroot;</span><br><span class="line">        fastcgi_pass <span class="attr">lnmp_php</span>:<span class="number">9000</span>;</span><br><span class="line">        fastcgi_param <span class="variable constant_">SCRIPT_FILENAME</span> $document_root$fastcgi_script_name;</span><br><span class="line">        include fastcgi_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>PHP项目镜像构建：PHP</p>
<p>php目录文件: 1.Dockerfile 2.php-5.6.36.tar.gz 3.php-fpm.conf  4.php.ini</p>
<p>Dockerfile</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">FROM</span> <span class="attr">centos</span>:<span class="number">7</span></span><br><span class="line"><span class="variable constant_">MAINTAINER</span> www.<span class="property">ctnrs</span>.<span class="property">com</span></span><br><span class="line"><span class="variable constant_">RUN</span> yum install epel-release -y &amp;&amp; \</span><br><span class="line">    yum install -y gcc gcc-c++ make gd-devel libxml2-devel \</span><br><span class="line">    libcurl-devel libjpeg-devel libpng-devel openssl-devel \</span><br><span class="line">    libmcrypt-devel libxslt-devel libtidy-devel autoconf \</span><br><span class="line">    iproute net-tools telnet wget curl &amp;&amp; \</span><br><span class="line">    yum clean all &amp;&amp; \</span><br><span class="line">    rm -rf /<span class="keyword">var</span>/cache/yum<span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">ADD php-5.6.36.tar.gz /</span></span><br><span class="line"><span class="comment">RUN cd php-5.6.36 &amp;&amp; \</span></span><br><span class="line"><span class="comment">    ./configure --prefix=/usr/local/php \</span></span><br><span class="line"><span class="comment">    --with-config-file-path=/usr/local/php/etc \</span></span><br><span class="line"><span class="comment">    --enable-fpm --enable-opcache \</span></span><br><span class="line"><span class="comment">    --with-mysql --with-mysqli --with-pdo-mysql \</span></span><br><span class="line"><span class="comment">    --with-openssl --with-zlib --with-curl --with-gd \</span></span><br><span class="line"><span class="comment">    --with-jpeg-dir --with-png-dir --with-freetype-dir \</span></span><br><span class="line"><span class="comment">    --enable-mbstring --with-mcrypt --enable-hash &amp;&amp; \</span></span><br><span class="line"><span class="comment">    make -j 4 &amp;&amp; make install &amp;&amp; \</span></span><br><span class="line"><span class="comment">    cp php.ini-production /usr/local/php/etc/php.ini &amp;&amp; \</span></span><br><span class="line"><span class="comment">    cp sapi/fpm/php-fpm.conf /usr/local/php/etc/php-fpm.conf &amp;&amp; \</span></span><br><span class="line"><span class="comment">    sed -i &quot;90a \daemonize = no&quot; /usr/local/php/etc/php-fpm.conf &amp;&amp; \</span></span><br><span class="line"><span class="comment">    mkdir /usr/local/php/log &amp;&amp; \</span></span><br><span class="line"><span class="comment">    cd / &amp;&amp; rm -rf php* &amp;&amp; \</span></span><br><span class="line"><span class="comment">    ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">ENV PATH $PATH:/usr/local/php/sbin</span></span><br><span class="line"><span class="comment">COPY php.ini /usr/local/php/etc/</span></span><br><span class="line"><span class="comment">COPY php-fpm.conf /usr/local/php/etc/</span></span><br><span class="line"><span class="comment">WORKDIR /usr/local/php</span></span><br><span class="line"><span class="comment">EXPOSE 9000</span></span><br><span class="line"><span class="comment">CMD [&quot;php-fpm&quot;]</span></span><br><span class="line"><span class="comment"></span></span><br></pre></td></tr></table></figure>
<p>容器化搭建个人博客系统</p>
<p>1、自定义网络</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">docker network create lnmp</span><br></pre></td></tr></table></figure>
<p>2、创建Mysql容器</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">docker run -d --name lnmp_mysql --net lnmp --mount src=mysql-vol,dst=<span class="regexp">/var/</span>lib/mysql -e <span class="variable constant_">MYSQL_ROOT_PASSWORD</span>=<span class="number">123456</span> -e <span class="variable constant_">MYSQL_DATABASE</span>=wordpress <span class="attr">mysql</span>:<span class="number">5.7</span> --character-set-server=utf8</span><br></pre></td></tr></table></figure>
<p>3、创建PHP容器</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">docker run -d --name lnmp_php --net lnmp --mount src=wwwroot,dst=/wwwroot <span class="attr">php</span>:v1</span><br></pre></td></tr></table></figure>
<p>4、创建Nginx容器</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">docker run -d --name lnmp_nginx --net lnmp -p <span class="number">88</span>:<span class="number">80</span> --mount src=wwwroot,dst=<span class="regexp">/wwwroot --mount type=bind,src=$PWD/</span>php.<span class="property">conf</span>,dst=<span class="regexp">/usr/</span>local/nginx/conf/vhost/php.<span class="property">conf</span> <span class="attr">nginx</span>:v1</span><br></pre></td></tr></table></figure>
<p>5、访问php网页</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cd  /<span class="keyword">var</span>/lib/docker/volumes/wwwroot/_data/</span><br><span class="line">vim test.<span class="property">php</span></span><br><span class="line">&lt;?php <span class="title function_">phpinfo</span>();?&gt;</span><br><span class="line"></span><br><span class="line"><span class="attr">http</span>:<span class="comment">//192.168.0.11:88/test.php</span></span><br></pre></td></tr></table></figure>
<p>6.以wordpress博客为例</p>
<p><a href="attachments/DA30ED5D4B2C4750AEA183252F67A445wordpress-4.9.4-zh_CN.tar.gz">wordpress-4.9.4-zh_CN.tar.gz</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cd  /<span class="keyword">var</span>/lib/docker/volumes/wwwroot/_data/</span><br><span class="line">tar -zxf wordpress-<span class="number">4.9</span><span class="number">.4</span>-zh_CN.<span class="property">tar</span>.<span class="property">gz</span></span><br><span class="line">mv wordpress<span class="comment">/* .</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">http://192.168.0.11:88</span></span><br></pre></td></tr></table></figure>
<p><img src="/2022/05/28/%E5%AE%B9%E5%99%A8%E5%8C%96%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/691AF1100B69430F9FF94B594939ED9Eclipboard.png" alt></p>
<p><img src="/2022/05/28/%E5%AE%B9%E5%99%A8%E5%8C%96%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/AA9191C1DDFA433D88B7445EB109505Dclipboard.png" alt></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>镜像的制作CMD与ENTRYPOINT区别</title>
    <url>/2022/05/24/%E9%95%9C%E5%83%8F%E7%9A%84%E5%88%B6%E4%BD%9CCMD%E4%B8%8EENTRYPOINT%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p>1.构建镜像时必须指定一个CMD 或者ENTRYPOINT 去夯住进程，不让它退出，放在容器前台执行，否则容器就退出了。</p>
<p>2.CMD exec 形式变量传参需要指定（“sh”,“-c”,“/usr/bin/run.sh $abc”）</p>
<p>FROM centos:7</p>
<p>LABEL maintalner liuzhe</p>
<p>COPY <a href="http://run.sh">run.sh</a> /usr/bin</p>
<p>ENV abc=azhe</p>
<p>EXPOSE 80</p>
<p>CMD [“sh”,“-c”,“/usr/bin/run.sh $abc”]</p>
<p>3.CMD shell形式直接使用变量传参</p>
<p>FROM centos:7</p>
<p>LABEL maintalner liuzhe</p>
<p>COPY <a href="http://run.sh">run.sh</a> /usr/bin</p>
<p>ENV abc=azhe</p>
<p>EXPOSE 80</p>
<p>CMD <a href="http://run.sh">run.sh</a> $abc</p>
<p>4.docker run [OPTIONS] IMAGE [COMMAND] [ARG…]</p>
<p>docker run -d test <a href="http://run.sh">run.sh</a> liuzhe</p>
<p>通过命令行指定的形式覆盖Dockerfile 中的CMD命令</p>
<p>5.docker run [OPTIONS] IMAGE [COMMAND] [ARG…]</p>
<p>docker run -d test <a href="http://run.sh">run.sh</a> wangwu</p>
<p>通过命令行指定的形式覆盖Dockerfile 中的ENTRYPOINT命令需要指定 --entrypoint参数</p>
<p>6.当CMD和ENTRYPOINT配合使用时，CMD的值会作为ENTRYPOINT 的默认参数</p>
<p>FROM centos:7</p>
<p>LABEL maintalner liuzhe</p>
<p>COPY <a href="http://run.sh">run.sh</a> /usr/bin</p>
<p>ENV abc=azhe</p>
<p>EXPOSE 80</p>
<p>ENTRYPOINT [“<a href="http://run.sh">run.sh</a>”]     #ENTRYPOINT执行 可执行文件  必须使用exec的形式</p>
<p>CMD [“hello”,“libai”]      #CMD的值为ENTRYPOINT传参</p>
<p>#####<a href="http://run.sh#######">run.sh#######</a></p>
<p>#!/bin/bash</p>
<p>echo $@</p>
<p>sleep 70000</p>
<p>最终执行的命令就是</p>
<p>/usr/bin/run.sh hello libai</p>
<p>docker run -d test hello liuzhe 也可以通过命令行的形式覆盖CMD命令的值</p>
<p>小结：</p>
<ol>
<li>
<p>CMD和ENTRYPOINT指令都可以用来定义运行容器时所使用的默认命令</p>
</li>
<li>
<p>Dockerfile至少指定一个CMD或ENTRYPOINT</p>
</li>
<li>
<p>CMD可以用作ENTRYPOINT默认参数，或者用作容器的默认命令</p>
</li>
<li>
<p>docker run指定<command>时，将会覆盖CMD的值</p>
</li>
<li>
<p>如果是可执行文件，希望运行时传参，应该使用ENTRYPOINT</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
</search>

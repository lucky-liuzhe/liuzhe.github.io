<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Harbor部署</title>
    <url>/2024/05/23/harbor/</url>
    <content><![CDATA[<p><strong>Harbor 概述</strong></p>
<p>Harbor是由VMWare公司开源的容器镜像仓库。事实上，Harbor是在Docker Registry上进行了相应的企业级扩展， 从而获得了更加广泛的应用，这些新的企业级特性包括：管理用户界面，基于角色的访问控制 ，AD/LDAP集成以及 审计日志等，足以满足基本企业需求。</p>
<p>官方：<a href="https://goharbor.io/">https://goharbor.io/</a></p>
<p>Github：<a href="https://github.com/goharbor/harbor">https://github.com/goharbor/harbor</a></p>
<p><strong>Harbor 部署先决条件</strong></p>
<p><strong>服务器硬件配置：</strong></p>
<p>最低要求：CPU2核/内存4G/硬盘40GB</p>
<p>推荐：CPU4核/内存8G/硬盘160GB</p>
<p><strong>软件：</strong></p>
<p>Docker CE 17.06版本+</p>
<p>Docker Compose 1.18版本+</p>
<p><strong>Harbor安装有2种方式：</strong></p>
<p>在线安装：从Docker Hub下载Harbor相关镜像，因此安装软件包非常小</p>
<p>离线安装：安装包包含部署的相关镜像，因此安装包比较大</p>
<p><strong>Harbor 部署HTTP</strong></p>
<p><strong>1、先安装Docker和Docker Compose</strong></p>
<p><a href="https://github.com/docker/compose/releases">https://github.com/docker/compose/releases</a></p>
<p><strong>2、部署Harbor HTTP</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> docker-compose-Linux-x86_64 /usr/bin/docker-compose</span><br><span class="line"></span><br><span class="line"><span class="built_in">chmod</span> +x /usr/bin/docker-compose</span><br><span class="line"></span><br><span class="line">tar zxvf harbor-offline-installer-v2.0.0.tgz</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> harbor</span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> harbor.yml.tmpl harbor.yml</span><br><span class="line"></span><br><span class="line">vi harbor.yml</span><br><span class="line"></span><br><span class="line">hostname: reg.azhe.com</span><br><span class="line"></span><br><span class="line">\<span class="comment">#https: \# 先注释https相关配置</span></span><br><span class="line"></span><br><span class="line">harbor_admin_password: Harbor12345</span><br><span class="line"></span><br><span class="line">./prepare</span><br><span class="line"></span><br><span class="line">./install.sh</span><br></pre></td></tr></table></figure>
<p><strong>3、访问harbor</strong></p>
<p><a href="http://reg.azhe.com/">http://reg.azhe.com/</a></p>
<p><img src="/2024/05/23/harbor/fcff357ae763b386b17580e91eb57d57.png" alt="clipboard.png"></p>
<p><strong>Harbor 基本使用</strong></p>
<p><strong>1、配置http镜像仓库可信任（默认是https访问的，上面配置的是http，这里需要配置可信任)</strong></p>
<p>#配置http镜像仓库可信任</p>
<p>vi /etc/docker/daemon.json</p>
<p>{“insecure-registries”:[“<a href="http://reg.azhe.com">reg.azhe.com</a>”]}</p>
<p>systemctl restart docker</p>
<p>#查看是否有harbor容器退出，重新停止再拉起</p>
<p>docker-compose ps</p>
<p>docker-compose down</p>
<p>docker-compose up -d</p>
<p><strong>2.配置本地hosts文件解析</strong></p>
<p>vim /etc/hosts</p>
<p>192.168.0.11 <a href="http://reg.azhe.com">reg.azhe.com</a></p>
<p><strong>3.登录harbbor,打标签，上传，下载</strong></p>
<p>docker login <a href="http://reg.azhe.com">reg.azhe.com</a></p>
<p>Username: admin</p>
<p>Password: Harbor12345</p>
<p>docker images</p>
<p>docker tag mysql:5.7 <a href="http://reg.azhe.com/library/mysql:5.7">reg.azhe.com/library/mysql:5.7</a></p>
<p>docker push <a href="http://reg.azhe.com/library/mysql:5.7">reg.azhe.com/library/mysql:5.7</a></p>
<p>docker pull <a href="http://reg.azhe.com/library/mysql:5.7">reg.azhe.com/library/mysql:5.7</a></p>
<p><img src="/2024/05/23/harbor/282269c462ba97ad5ac80262a795f56c.png" alt="clipboard.png"></p>
<p><strong>Harbor 部署HTTPS</strong></p>
<p><strong>1、生成SSL证书</strong></p>
<p>mkdir ssl</p>
<p>cd ssl</p>
<p>ls</p>
<p>ca-config.json ca-key.pem <a href="http://cfssl.sh">cfssl.sh</a> reg.azhe.com-key.pem</p>
<p>ca.csr ca.pem reg.azhe.com.csr reg.azhe.com.pem</p>
<p>ca-csr.json <a href="http://certs.sh">certs.sh</a> reg.azhe.com-csr.json</p>
<p>vim <a href="http://cfssl.sh">cfssl.sh</a> (证书生成工具）</p>
<p>wget <a href="https://pkg.cfssl.org/R1.2/cfssl_linux-amd64">https://pkg.cfssl.org/R1.2/cfssl_linux-amd64</a></p>
<p>wget <a href="https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64">https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64</a></p>
<p>wget <a href="https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64">https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64</a></p>
<p>chmod +x cfssl*</p>
<p>mv cfssl_linux-amd64 /usr/bin/cfssl</p>
<p>mv cfssljson_linux-amd64 /usr/bin/cfssljson</p>
<p>mv cfssl-certinfo_linux-amd64 /usr/bin/cfssl-certinfo</p>
<p>vim <a href="http://certs.sh">certs.sh</a>(证书生成脚本）</p>
<p>#注意里面的域名修改为自己的harbor域名</p>
<p>cat &gt; ca-config.json &lt;&lt;EOF</p>
<p>{</p>
<p>“signing”: {</p>
<p>“default”: {</p>
<p>“expiry”: “87600h”</p>
<p>},</p>
<p>“profiles”: {</p>
<p>“kubernetes”: {</p>
<p>“expiry”: “87600h”,</p>
<p>“usages”: [</p>
<p>“signing”,</p>
<p>“key encipherment”,</p>
<p>“server auth”,</p>
<p>“client auth”</p>
<p>]</p>
<p>}</p>
<p>}</p>
<p>}</p>
<p>}</p>
<p>EOF</p>
<p>cat &gt; ca-csr.json &lt;&lt;EOF</p>
<p>{</p>
<p>“CN”: “kubernetes”,</p>
<p>“key”: {</p>
<p>“algo”: “rsa”,</p>
<p>“size”: 2048</p>
<p>},</p>
<p>“names”: [</p>
<p>{</p>
<p>“C”: “CN”,</p>
<p>“L”: “Beijing”,</p>
<p>“ST”: “Beijing”</p>
<p>}</p>
<p>]</p>
<p>}</p>
<p>EOF</p>
<p>cfssl gencert -initca ca-csr.json | cfssljson -bare ca -</p>
<p>cat &gt; reg.azhe.com-csr.json &lt;&lt;EOF</p>
<p>{</p>
<p>“CN”: “<a href="http://reg.azhe.com">reg.azhe.com</a>”,</p>
<p>“hosts”: [],</p>
<p>“key”: {</p>
<p>“algo”: “rsa”,</p>
<p>“size”: 2048</p>
<p>},</p>
<p>“names”: [</p>
<p>{</p>
<p>“C”: “CN”,</p>
<p>“L”: “BeiJing”,</p>
<p>“ST”: “BeiJing”</p>
<p>}</p>
<p>]</p>
<p>}</p>
<p>EOF</p>
<p>cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes reg.azhe.com-csr.json | cfssljson -bare <a href="http://reg.azhe.com">reg.azhe.com</a></p>
<p><strong>2、Harbor启用HTTPS</strong></p>
<p>vi harbor.yml</p>
<p>https:</p>
<p>port: 443</p>
<p>certificate: /root/ssl/reg.azhe.com.pem #指定你生成的数字证书</p>
<p>private_key: /root/ssl/reg.azhe.com-key.pem #指定key</p>
<p><strong>3、重新配置并部署Harbor</strong></p>
<p>./prepare</p>
<p>docker-compose down</p>
<p>docker-compose up –d</p>
<p><strong>4、修改Docker启动文件添加“–insecure-registry <a href="http://reg.azhe.com">reg.azhe.com</a>”并配置hosts文件</strong></p>
<p>vim /usr/lib/systemd/system/docker.service</p>
<p>ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock --insecure-registry <a href="http://reg.azhe.com">reg.azhe.com</a></p>
<p>systemctl restart docker</p>
<p>vim /etc/hosts</p>
<p>192.168.0.11 <a href="http://reg.azhe.com">reg.azhe.com</a></p>
<p><strong>5、验证</strong></p>
<p>docker login <a href="http://reg.azhe.com">reg.azhe.com</a></p>
<p>Username: admin</p>
<p>Password: Harbor12345</p>
<p>docker images</p>
<p>docker pull <a href="http://reg.azhe.com/library/mysql:5.7">reg.azhe.com/library/mysql:5.7</a></p>
<p>以上harbor部署https方式的第4步骤，如果配置完成后，在docker主机登录harbor报证书错误，那么可以通过以下方式解决或参考链接：</p>
<p>4.将数字证书复制到Docker主机</p>
<p>scp reg.azhe.com.pem <a href="mailto:root@192.168.0.13">root@192.168.0.13</a>:~ #拷贝到要登录harbor的docker客户端</p>
<p>mkdir /etc/docker/certs.d/reg.azhe.com</p>
<p>cp reg.azhe.com.pem /etc/docker/certs.d/reg.azhe.com/reg.azhe.com.crt</p>
<p>参考链接</p>
<p><a href="https://blog.csdn.net/chenglang0914/article/details/100833054">https://blog.csdn.net/chenglang0914/article/details/100833054</a></p>
<p><strong>Harbor 主从复制</strong></p>
<p><img src="/2024/05/23/harbor/80c56c0643bbfa66debfff3411830cae.png" alt="clipboard.png"></p>
<p><strong>主备模式</strong></p>
<p><strong>1.准备备机harbor</strong></p>
<p>mv docker-compose-Linux-x86_64 /usr/bin/docker-compose</p>
<p>chmod +x /usr/bin/docker-compose</p>
<p>tar -zxf harbor-offline-installer-v2.0.0.tgz</p>
<p>cd harbor</p>
<p>cp harbor.yml.tmpl harbor.yml</p>
<p>vi harbor.yml</p>
<p>hostname: 192.168.0.12</p>
<p>#https: # 先注释https相关配置</p>
<p>harbor_admin_password: Harbor12345</p>
<p>./prepare</p>
<p>./install.sh</p>
<p><strong>2.在主harbor页面配置主从复制和规则</strong></p>
<p><img src="/2024/05/23/harbor/dae8a56b097130c5c4c74539e2dbb13f.png" alt="clipboard.png"></p>
<p><img src="/2024/05/23/harbor/306e9cf25c6e1e69ea05b8f98fd3c030.png" alt="clipboard.png"></p>
<p><strong>3.客户端docker主机上传镜像到主harbor并验证是否复制到从harbor</strong></p>
<p>docker login <a href="http://reg.azhe.com">reg.azhe.com</a></p>
<p>Username: admin</p>
<p>Password: Harbor12345</p>
<p>docker tag centos:7 <a href="http://reg.azhe.com/library/centos:7">reg.azhe.com/library/centos:7</a></p>
<p>docker push <a href="http://reg.azhe.com/library/centos:7">reg.azhe.com/library/centos:7</a></p>
<p><img src="/2024/05/23/harbor/1bc9fd9a67bb302eb789a66ee885e429.png" alt="clipboard.png"></p>
<p><img src="/2024/05/23/harbor/5e667212feaa05f7875109ea1de4ee16.png" alt="clipboard.png"></p>
<p><img src="/2024/05/23/harbor/4d5dc2c8a52441d065b854d0ebc637ec.png" alt="clipboard.png"></p>
<p><strong>Harbor 运维维护</strong></p>
<p><img src="/2024/05/23/harbor/84ae158c839189d6b5ef4a4f1096b932.png" alt="clipboard.png"></p>
<p><strong>容器数据持久化目录：/data</strong></p>
<p><strong>日志文件目录：/var/log/harbor</strong></p>
<p><strong>PG数据库做好定期备份，里面存放用户数据文件。</strong></p>
<p><strong>主从复制，主harbor挂掉，启用备harbor，需要把pg数据导入到备harbor。</strong></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2024/05/21/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start">Quick Start</h2>
<h3 id="Create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
      </tags>
  </entry>
  <entry>
    <title>test</title>
    <url>/2024/05/21/test/</url>
    <content><![CDATA[<p><strong>实验环境</strong>：</p>
<table>
<thead>
<tr>
<th>gitlab（4G）</th>
<th>jenkins（3G）</th>
<th>slave/ansible</th>
<th>nginx</th>
<th>tomcat</th>
<th>tomcat</th>
</tr>
</thead>
<tbody>
<tr>
<td>192.168.1.2/24</td>
<td>192.168.1.3/24</td>
<td>192.168.1.4/24</td>
<td>192.168.1.5/24</td>
<td>192.168.1.6/24</td>
<td>192.168.1.7/24</td>
</tr>
</tbody>
</table>
<p><strong>架构原理</strong>：使用gitlab作为代码版本管理系统，jenkins作为代码持续集成测试，结合ansible实现批量部署多台web服务器，nginx作为反向代理服务器代理后端web集群。</p>
<p><strong>自动化部署流程</strong>：</p>
<p>1.git代码拉取</p>
<p>2.编译构建</p>
<p>3.推送到远程web服务器</p>
<p>4.备份web服务器上网站根目录的程序文件</p>
<p>5.部署新的程序文件到网站根目录</p>
<p>6.重启web服务验证访问</p>
<p><strong>部署</strong>：</p>
<p>1. 安装docker(gitlab服务器和jenkins服务器）</p>
<p><a href="https://blog.csdn.net/qq_24760259/article/details/106785283">https://blog.csdn.net/qq_24760259/article/details/106785283</a></p>
<p>2. 安装gitlab</p>
<p>###########安装配置gitlab##############</p>
<p>mkdir /opt/gitlab</p>
<p>GITLAB_HOME=/opt/gitlab # 数据持久化目录</p>
<p>docker run --detach \</p>
<p>--hostname <a href="http://gitlab.ctnrs.com">gitlab.ctnrs.com</a> \</p>
<p>--publish 80:80 --publish 2222:22 \</p>
<p>--name gitlab \</p>
<p>--restart always \</p>
<p>--volume $GITLAB_HOME/config:/etc/gitlab \</p>
<p>--volume $GITLAB_HOME/logs:/var/log/gitlab \</p>
<p>--volume $GITLAB_HOME/data:/var/opt/gitlab \</p>
<p>gitlab/gitlab-ce:latest</p>
<p>[root@localhost ~]# docker exec -it gitlab bash</p>
<p>root@gitlab:/# gitlab-ctl reconfigure #加载配置并启动</p>
<p>页面登录后新建用户—&gt;新建组—&gt;将用户加入组中（赋予作者权限）—&gt;在组中新建项目</p>
<p>#############上传java网站代码#############</p>
<p>yum install git</p>
<p>git clone <a href="https://github.com/lizhenliang/tomcat-java-demo">https://github.com/lizhenliang/tomcat-java-demo</a></p>
<p>cd tomcat-java-demo</p>
<p>git init #初始化为.git的目录</p>
<p>git remote add origin <a href="http://gitlab.ctnrs.com/group-lz/java-demo.git">http://gitlab.ctnrs.com/group-lz/java-demo.git</a></p>
<p>#修改为自己的仓库地址</p>
<p>cat .git/config</p>
<p>url = <a href="http://gitlab.ctnrs.com/group-lz/java-demo.git">http://gitlab.ctnrs.com/group-lz/java-demo.git</a></p>
<p>git add . #添加到暂存区</p>
<p>git commit -m “java-demo” #提交到本地仓库</p>
<p>git push origin master #上传到远程仓库的master分支</p>
<p>3.安装jenkins</p>
<p>############安装jenkins###########</p>
<p>tar zxvf jdk-8u45-linux-x64.tar.gz</p>
<p>mv jdk1.8.0_45 /usr/local/jdk</p>
<p>tar zxf apache-maven-3.5.0-bin.tar.gz</p>
<p>mv apache-maven-3.5.0 /usr/local/maven</p>
<p>docker run -d --name jenkins -p 8080:8080 -p 50000:50000 -u root -v /opt/jenkins_home:/var/jenkins_home -v /var/run/docker.sock:/var/run/docker.sock -v /usr/bin/docker:/usr/bin/docker -v /usr/local/maven:/usr/local/maven -v /usr/local/jdk:/usr/local/jdk -v /etc/localtime:/etc/localtime --restart=always --add-host=gitlab.ctnrs.com:192.168.0.5 --name jenkins jenkins/jenkins:lts</p>
<p>#########配置jdk和mvn环境##########</p>
<p># vi /etc/profile</p>
<p>JAVA_HOME=/usr/local/jdk</p>
<p>PATH=$JAVA_HOME/bin:$PATH:/usr/local/jdk/bin</p>
<p>export JAVA_HOME PATH</p>
<p># source /etc/profile</p>
<p>配置插件加速器：</p>
<p>docker exec -it jenkins bash</p>
<p>cd /var/jenkins_home/updates</p>
<p>sed -i ‘s/https:\/\/updates.jenkins.io\/download/https:\/\/mirrors.tuna.tsinghua.edu.cn\/jenkins/g’ default.json</p>
<p>sed -i ‘s/http:\/\/www.google.com/https:\/\/www.baidu.com/g’ default.json</p>
<p>jenkins访问页面非常慢的办法：</p>
<p>cat /opt/jenkins_home/hudson.model.UpdateCenter.xml</p>
<p>修改为以下地址：</p>
<p><a href="http://mirror.xmission.com/jenkins/updates/update-center.json">http://mirror.xmission.com/jenkins/updates/update-center.json</a></p>
<p>#重启jenkins服务</p>
<p>docker restart jenkins或者<a href="http://ip:8080/restart">http://ip:8080/restart</a></p>
<p>配置域名解析</p>
<p>cat /etc/hosts</p>
<p>192.168.1.5 <a href="http://gitlab.ctnrs.com">gitlab.ctnrs.com</a></p>
<p>安装jenkins需要的插件：</p>
<p>ansible 插件</p>
<p><img src="/2024/05/21/test/fe30fc112c15b9e012c366b05db211dd.jpeg" alt="插件.JPG"></p>
<p>系统管理----&gt;节点管理----新建节点（配置slave从节点）</p>
<p><img src="/2024/05/21/test/7493f7816f391814f58d1c3d80ef9596.png" alt="clipboard.png"></p>
<p><img src="/2024/05/21/test/c2d91b6ac615b60e80063ae46589a76b.png" alt="clipboard.png"></p>
<p><img src="/2024/05/21/test/f694852c04c098b9fe4bfb2f8e19e003.png" alt="clipboard.png"></p>
<p>在jenkins客户端执行并创建工作目录/opt/jenkins：</p>
<p>安装Agent 1、节点安装JDK 2、下载agent.jar 3、使用nohup xxx &amp;&gt;slave.log &amp;</p>
<p>新建项目—&gt;进入到项目配置页面（配置项目）</p>
<p><img src="/2024/05/21/test/4b2b06b9312a853ff7f57bb4f0107ff8.png" alt="clipboard.png"></p>
<p><img src="/2024/05/21/test/589c940e10c2d37d1f6828bb2d6e2ccf.png" alt="clipboard.png"></p>
<p><img src="/2024/05/21/test/82c352d2a5d1a27f3a28b5f58fd8e2b0.png" alt="clipboard.png"></p>
<p><img src="/2024/05/21/test/c524ef564c591b73e0721830540a4e35.png" alt="clipboard.png"></p>
<p><img src="/2024/05/21/test/0065f9d36d6e55e32f9d16df84a066e3.png" alt="clipboard.png"></p>
<p><img src="/2024/05/21/test/7e02afa82f29876382dc32cce452c0da.png" alt="clipboard.png"></p>
<p><img src="/2024/05/21/test/40ede2c7c32b3a2d4bda139b2877fc05.png" alt="clipboard.png"></p>
<p><img src="/2024/05/21/test/1203db9d554b6ea4db6b35c5558f71fb.png" alt="clipboard.png"></p>
<p>4.在jnekins的slave上安装ansible，maven，jdk</p>
<p>配置域名解析</p>
<p>cat /etc/hosts</p>
<p>192.168.1.5 <a href="http://gitlab.ctnrs.com">gitlab.ctnrs.com</a></p>
<p>#安装ansible</p>
<p>yum -y install ansible</p>
<p>#安装git工具 (jenkins工作节点要去远程仓库拉取代码)</p>
<p>yum -y install git</p>
<p>#安装jdk和maven</p>
<p>tar zxvf jdk-8u45-linux-x64.tar.gz</p>
<p>mv jdk1.8.0_45 /usr/local/jdk</p>
<p>tar zxf apache-maven-3.5.0-bin.tar.gz</p>
<p>mv apache-maven-3.5.0 /usr/local/maven</p>
<p>#配置环境变量</p>
<p>vi /etc/profile</p>
<p>JAVA_HOME=/usr/local/jdk</p>
<p>PATH=$JAVA_HOME/bin:$PATH:/usr/local/maven/bin</p>
<p>export JAVA_HOME PATH</p>
<p>#加载生效</p>
<p>source /etc/profile</p>
<p>#配置文件修改：</p>
<p>cat /etc/ansible/hosts #主机清单文件</p>
<p>[webserver1]</p>
<p>192.168.1.2</p>
<p>192.168.1.5</p>
<p>cat /etc/ansible/ansible.cfg #配置文件</p>
<p>#主机清单 inventory 文 件，就是一些需要连接的 主机</p>
<p>inventory = /etc/ansible/hosts</p>
<p>#并发进程数。多少个进程 同时工作，可以根据控制 主机的性能和被管理节点 的数量来确定。</p>
<p>forks = 5</p>
<p>#提权</p>
<p>sudo_user = root</p>
<p>#连接被管理服务器默认端 口</p>
<p>remote_port = 22</p>
<p>#是否检查 SSH 主机的密钥</p>
<p>host_key_checking = False</p>
<p>#SSH 连接超时时间，单位 秒，可以增大值</p>
<p>timeout = 10</p>
<p>#默认不记录日志，如果想 记录日志需要开启指定日 志文件，需要 ansible 用 户有写入日志权限</p>
<p>log_path = /var/log/ansible.log</p>
<p>#私钥 key</p>
<p>private_key_file = /root/.ssh/id_rsa</p>
<p>#使用root账户生成一对密钥</p>
<p>ssh-keygen</p>
<p>ssh-copy root@x.x.x.x (拷贝到要部署的web服务器上实现免密登录)</p>
<p>#使用ansible命令测试一下</p>
<p>ansible webserver1 -m shell -a “ls /root” -u root</p>
<p>#在/opt/jenkins目录下新建文件playbook.yml</p>
<p>cat playbook.yml</p>
<p>-–</p>
<p>- hosts: “”</p>
<p>tasks:</p>
<p>- name: copy file</p>
<p>copy: src=/opt/jenkins/workspace/java-demo/target/ly-simple-tomcat-0.0.1-SNAPSHOT.war dest=/tmp</p>
<p>- name: deploy</p>
<p>shell: |</p>
<p>tomcat=/usr/local/tomcat</p>
<p>cd $tomcat/webapps</p>
<p>mv ROOT.war /data/backup/$(date +%F_%T)_ROOT.war</p>
<p>mv /tmp/ly-simple-tomcat-0.0.1-SNAPSHOT.war $tomcat/webapps/ROOT.war</p>
<p>pid=$(ps -ef |grep tomcat |egrep -v “grep|$$” |awk ‘{print $2}’)</p>
<p>[ -n $pid ] &amp;&amp; kill -9 $pid</p>
<p>nohup /usr/local/tomcat/bin/startup.sh</p>
<p>5.nginx反向代理服务器配置</p>
<p>#配置nginx yum源（使用yum安装nginx)</p>
<p>[root@localhost ~]# cat /etc/yum.repos.d/nginx.repo</p>
<p>[nginx]</p>
<p>name=nginx repo</p>
<p>baseurl=<a href="http://nginx.org/packages/centos/7/%5C$basearch/">http://nginx.org/packages/centos/7/\$basearch/</a></p>
<p>gpgcheck=0</p>
<p>enabled=1</p>
<p>#配置nginx虚拟主机配置文件</p>
<p>[root@localhost ~]# cat /etc/nginx/conf.d/default.conf</p>
<p>upstream java-demo {</p>
<p>server 192.168.1.2:8080;</p>
<p>server 192.168.1.5:8080;</p>
<p>}</p>
<p>server {</p>
<p>listen 80;</p>
<p>server_name localhost;</p>
<p>#access_log /var/log/nginx/host.access.log main;</p>
<p>location / {</p>
<p>root /usr/share/nginx/html;</p>
<p>proxy_pass <a href="http://java-demo">http://java-demo</a>;</p>
<p>}</p>
<p>}</p>
<p>#重启nginx</p>
<p>systemctl restart nginx</p>
<p>6.tomcat服务器（两台web服务器一样的配置）：</p>
<p>#安装tomcat</p>
<p>tar zxvf jdk-8u45-linux-x64.tar.gz</p>
<p>mv jdk1.8.0_45 /usr/local/jdk</p>
<p>tar -zxf apache-tomcat-8.5.59.tar.gz</p>
<p>mv apache-tomcat-8.5.59 /usr/local/tomcat</p>
<p>cd /usr/local/tomcat/webapps/</p>
<p>rm -rf *</p>
<p>touch ROOT.war</p>
<p>#新建备份数据目录</p>
<p>mkdir /data/backup -p</p>
<p>#配置jdk环境变量</p>
<p>vi /etc/profile</p>
<p>JAVA_HOME=/usr/local/jdk</p>
<p>PATH=$JAVA_HOME/bin:$PATH:/usr/local/maven/bin</p>
<p>export JAVA_HOME PATH</p>
<p>#加载生效</p>
<p>source /etc/profile</p>
<p>验证：</p>
<p>访问nginx反向代理服务器</p>
<p>192.168.1.5:80</p>
<p>访问tomcat web服务器1</p>
<p>192.168.1.6:8080</p>
<p>访问tomcat web服务器2</p>
<p>192.168.1.7:8080</p>
<p>模拟提交代码验证:</p>
<p>#修改页面代码</p>
<p>vim java-demo/src/main/resources/templates/index.ftl</p>
<p>git add .</p>
<p>git commit -m “demo”</p>
<p>git push origin master</p>
<p>提交代码等待jenkins触发构建，验证查看页面是否变化</p>
]]></content>
      <categories>
        <category>K8S</category>
      </categories>
      <tags>
        <tag>K8S</tag>
      </tags>
  </entry>
  <entry>
    <title>容器化搭建个人博客系统</title>
    <url>/2024/05/23/%E5%AE%B9%E5%99%A8%E5%8C%96%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>Dockerfile涉及相关的文件及安装包</p>
<p><a href="attachments/F00C39A38A9E42F1B5B1DB1B3DA7CB4Adockerfile.zip">dockerfile.zip</a></p>
<p><img src="/2024/05/23/%E5%AE%B9%E5%99%A8%E5%8C%96%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/418306A840FE4995A255CA27354E9163clipboard.png" alt></p>
<p>前端项目镜像构建与部署：Nginx</p>
<p>nginx目录文件: 1.Dockerfile 2.nginx-1.15.5.tar.gz 3.nginx.conf4.php.conf</p>
<p>Dockerfile</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">FROM</span> <span class="attr">centos</span>:<span class="number">7</span></span><br><span class="line"><span class="variable constant_">LABEL</span> maintainer www.<span class="property">ctnrs</span>.<span class="property">com</span></span><br><span class="line"><span class="variable constant_">RUN</span> yum install -y gcc gcc-c++ make \</span><br><span class="line">    openssl-devel pcre-devel gd-devel \</span><br><span class="line">    iproute net-tools telnet wget curl &amp;&amp; \</span><br><span class="line">    yum clean all &amp;&amp; \</span><br><span class="line">    rm -rf /<span class="keyword">var</span>/cache/yum<span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">ADD nginx-1.15.5.tar.gz /</span></span><br><span class="line"><span class="comment">RUN cd nginx-1.15.5 &amp;&amp; \</span></span><br><span class="line"><span class="comment">    ./configure --prefix=/usr/local/nginx \</span></span><br><span class="line"><span class="comment">    --with-http_ssl_module \</span></span><br><span class="line"><span class="comment">    --with-http_stub_status_module &amp;&amp; \</span></span><br><span class="line"><span class="comment">    make -j 4 &amp;&amp; make install &amp;&amp; \</span></span><br><span class="line"><span class="comment">    mkdir /usr/local/nginx/conf/vhost &amp;&amp; \</span></span><br><span class="line"><span class="comment">    cd / &amp;&amp; rm -rf nginx* &amp;&amp; \</span></span><br><span class="line"><span class="comment">    ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">ENV PATH $PATH:/usr/local/nginx/sbin</span></span><br><span class="line"><span class="comment">COPY nginx.conf /usr/local/nginx/conf/nginx.conf</span></span><br><span class="line"><span class="comment">WORKDIR /usr/local/nginx</span></span><br><span class="line"><span class="comment">EXPOSE 80</span></span><br><span class="line"><span class="comment">CMD [&quot;nginx&quot;, &quot;-g&quot;, &quot;daemon off;&quot;]</span></span><br><span class="line"><span class="comment"></span></span><br></pre></td></tr></table></figure>
<p>nginx.conf</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">user                 nobody;</span><br><span class="line">worker_processes     <span class="number">4</span>;</span><br><span class="line">worker_rlimit_nofile <span class="number">65535</span>;</span><br><span class="line"></span><br><span class="line">error_log  logs/error.<span class="property">log</span>  notice;</span><br><span class="line"></span><br><span class="line">pid        /<span class="keyword">var</span>/run/nginx.<span class="property">pid</span>;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    use epoll;</span><br><span class="line">    worker_connections  <span class="number">4096</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line"></span><br><span class="line">    include       mime.<span class="property">types</span>;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main <span class="string">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    access_log off;</span><br><span class="line">    keepalive_timeout  <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">    client_max_body_size         64m;</span><br><span class="line">    include /usr/local/nginx/conf/vhost<span class="comment">/*.conf;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    server &#123;</span></span><br><span class="line"><span class="comment">        listen 80;</span></span><br><span class="line"><span class="comment">        server_name localhost;</span></span><br><span class="line"><span class="comment">        index index.html;</span></span><br><span class="line"><span class="comment">        access_log logs/access.log;</span></span><br><span class="line"><span class="comment">        location / &#123;</span></span><br><span class="line"><span class="comment">            root html;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br></pre></td></tr></table></figure>
<p>php.conf</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen <span class="number">80</span>;</span><br><span class="line">    server_name example.<span class="property">ctnrs</span>.<span class="property">com</span>;</span><br><span class="line">    index index.<span class="property">php</span> index.<span class="property">html</span>;</span><br><span class="line"></span><br><span class="line">    access_log logs/www.<span class="property">ctnrs</span>.<span class="property">com_access</span>.<span class="property">log</span>;</span><br><span class="line">    error_log logs/www.<span class="property">ctnrs</span>.<span class="property">com_error</span>.<span class="property">log</span>;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root /wwwroot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~* \.<span class="property">php$</span> &#123;</span><br><span class="line">        root /wwwroot;</span><br><span class="line">        fastcgi_pass <span class="attr">lnmp_php</span>:<span class="number">9000</span>;</span><br><span class="line">        fastcgi_param <span class="variable constant_">SCRIPT_FILENAME</span> $document_root$fastcgi_script_name;</span><br><span class="line">        include fastcgi_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>PHP项目镜像构建：PHP</p>
<p>php目录文件: 1.Dockerfile 2.php-5.6.36.tar.gz 3.php-fpm.conf  4.php.ini</p>
<p>Dockerfile</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">FROM</span> <span class="attr">centos</span>:<span class="number">7</span></span><br><span class="line"><span class="variable constant_">MAINTAINER</span> www.<span class="property">ctnrs</span>.<span class="property">com</span></span><br><span class="line"><span class="variable constant_">RUN</span> yum install epel-release -y &amp;&amp; \</span><br><span class="line">    yum install -y gcc gcc-c++ make gd-devel libxml2-devel \</span><br><span class="line">    libcurl-devel libjpeg-devel libpng-devel openssl-devel \</span><br><span class="line">    libmcrypt-devel libxslt-devel libtidy-devel autoconf \</span><br><span class="line">    iproute net-tools telnet wget curl &amp;&amp; \</span><br><span class="line">    yum clean all &amp;&amp; \</span><br><span class="line">    rm -rf /<span class="keyword">var</span>/cache/yum<span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">ADD php-5.6.36.tar.gz /</span></span><br><span class="line"><span class="comment">RUN cd php-5.6.36 &amp;&amp; \</span></span><br><span class="line"><span class="comment">    ./configure --prefix=/usr/local/php \</span></span><br><span class="line"><span class="comment">    --with-config-file-path=/usr/local/php/etc \</span></span><br><span class="line"><span class="comment">    --enable-fpm --enable-opcache \</span></span><br><span class="line"><span class="comment">    --with-mysql --with-mysqli --with-pdo-mysql \</span></span><br><span class="line"><span class="comment">    --with-openssl --with-zlib --with-curl --with-gd \</span></span><br><span class="line"><span class="comment">    --with-jpeg-dir --with-png-dir --with-freetype-dir \</span></span><br><span class="line"><span class="comment">    --enable-mbstring --with-mcrypt --enable-hash &amp;&amp; \</span></span><br><span class="line"><span class="comment">    make -j 4 &amp;&amp; make install &amp;&amp; \</span></span><br><span class="line"><span class="comment">    cp php.ini-production /usr/local/php/etc/php.ini &amp;&amp; \</span></span><br><span class="line"><span class="comment">    cp sapi/fpm/php-fpm.conf /usr/local/php/etc/php-fpm.conf &amp;&amp; \</span></span><br><span class="line"><span class="comment">    sed -i &quot;90a \daemonize = no&quot; /usr/local/php/etc/php-fpm.conf &amp;&amp; \</span></span><br><span class="line"><span class="comment">    mkdir /usr/local/php/log &amp;&amp; \</span></span><br><span class="line"><span class="comment">    cd / &amp;&amp; rm -rf php* &amp;&amp; \</span></span><br><span class="line"><span class="comment">    ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">ENV PATH $PATH:/usr/local/php/sbin</span></span><br><span class="line"><span class="comment">COPY php.ini /usr/local/php/etc/</span></span><br><span class="line"><span class="comment">COPY php-fpm.conf /usr/local/php/etc/</span></span><br><span class="line"><span class="comment">WORKDIR /usr/local/php</span></span><br><span class="line"><span class="comment">EXPOSE 9000</span></span><br><span class="line"><span class="comment">CMD [&quot;php-fpm&quot;]</span></span><br><span class="line"><span class="comment"></span></span><br></pre></td></tr></table></figure>
<p>容器化搭建个人博客系统</p>
<p>1、自定义网络</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">docker network create lnmp</span><br></pre></td></tr></table></figure>
<p>2、创建Mysql容器</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">docker run -d --name lnmp_mysql --net lnmp --mount src=mysql-vol,dst=<span class="regexp">/var/</span>lib/mysql -e <span class="variable constant_">MYSQL_ROOT_PASSWORD</span>=<span class="number">123456</span> -e <span class="variable constant_">MYSQL_DATABASE</span>=wordpress <span class="attr">mysql</span>:<span class="number">5.7</span> --character-set-server=utf8</span><br></pre></td></tr></table></figure>
<p>3、创建PHP容器</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">docker run -d --name lnmp_php --net lnmp --mount src=wwwroot,dst=/wwwroot <span class="attr">php</span>:v1</span><br></pre></td></tr></table></figure>
<p>4、创建Nginx容器</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">docker run -d --name lnmp_nginx --net lnmp -p <span class="number">88</span>:<span class="number">80</span> --mount src=wwwroot,dst=<span class="regexp">/wwwroot --mount type=bind,src=$PWD/</span>php.<span class="property">conf</span>,dst=<span class="regexp">/usr/</span>local/nginx/conf/vhost/php.<span class="property">conf</span> <span class="attr">nginx</span>:v1</span><br></pre></td></tr></table></figure>
<p>5、访问php网页</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cd  /<span class="keyword">var</span>/lib/docker/volumes/wwwroot/_data/</span><br><span class="line">vim test.<span class="property">php</span></span><br><span class="line">&lt;?php <span class="title function_">phpinfo</span>();?&gt;</span><br><span class="line"></span><br><span class="line"><span class="attr">http</span>:<span class="comment">//192.168.0.11:88/test.php</span></span><br></pre></td></tr></table></figure>
<p>6.以wordpress博客为例</p>
<p><a href="attachments/DA30ED5D4B2C4750AEA183252F67A445wordpress-4.9.4-zh_CN.tar.gz">wordpress-4.9.4-zh_CN.tar.gz</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cd  /<span class="keyword">var</span>/lib/docker/volumes/wwwroot/_data/</span><br><span class="line">tar -zxf wordpress-<span class="number">4.9</span><span class="number">.4</span>-zh_CN.<span class="property">tar</span>.<span class="property">gz</span></span><br><span class="line">mv wordpress<span class="comment">/* .</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">http://192.168.0.11:88</span></span><br></pre></td></tr></table></figure>
<p><img src="/2024/05/23/%E5%AE%B9%E5%99%A8%E5%8C%96%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/691AF1100B69430F9FF94B594939ED9Eclipboard.png" alt></p>
<p><img src="/2024/05/23/%E5%AE%B9%E5%99%A8%E5%8C%96%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/AA9191C1DDFA433D88B7445EB109505Dclipboard.png" alt></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
</search>
